<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Starting Variables
//For opening and closing actions
animating = 1;
//For background haze
scalex = 2 * (display_get_gui_width() / sprite_get_width(spr_fade));
scaley = 2* (display_get_gui_height() / sprite_get_height(spr_fade));

//Sliding speed (also change rate for direction)
slide_delta = 0.02 

//--Slide controls for individual sliding groups
//For sliding the select box and select option boxes
select_menu_slide = 0; // position (0..1)
//For sliding the main menu and first submenu box
main_menu_slide = 0; // position (0..1)
//For sliding the second submenu box and main menu title box
submenu_slide1 = 0; // position (0..1)
//For sliding the third submenu box
submenu_slide2 = 0; // position (0..1)


//For Selection Menu slide
//slide_from
//Selection menu start point, slides in from bottom left of screen
select_slide_from = display_get_gui_height()+sprite_get_height(spr_pause_bar); 
//Selection menu end point, stops when bottom of the sprite reaches the bottom of the screen
select_slide_to = display_get_gui_height() 


//Start point for menu selection boxes
//slide_from2 = -(display_get_gui_height()+sprite_get_height(spr_pause_bar)+sprite_get_width(spr_pause_option)); // slide in from left of screen
select_slide_from2 = -(sprite_get_width(spr_pause_option)); // slide in from left of screen
//End point for menu selection boxes
select_slide_to2 = 4 // sliding target position, half way across


//Start point for primary menu box
//Should open up 1/6 of the hub's width as negative space to the right of the box
main_slide_from = -(display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6));
//End point for primary menu box
//Much of the menu box is stretched into place and so uses an unwritten 0 instead.
main_slide_to = -(main_slide_from);

//Start point for menu title box
title_slide_from = -(sprite_get_height(spr_menu_corner)*2);
//End point for menu title box
title_slide_to = -(title_slide_from);



//Start point for all three subboxes
submenu_slide_from = main_slide_from + (sprite_get_width(spr_menu_subbox)*3);
//End point for first subbox
submenu_slide_to1 = (sprite_get_width(spr_menu_hub)/2)-(sprite_get_width(spr_menu_subbox)/3);
//End point for second subbox
submenu_slide_to2 = submenu_slide_to1 + ((sprite_get_width(spr_menu_subbox)/3)*2);
//End point for third subbox
submenu_slide_to3 = submenu_slide_to2 + ((sprite_get_width(spr_menu_subbox)/3)*2);



//For menu functionality
//Determines when menu can accept input
menu_on = 0;
//Allows switching between menu pages
menuselection = 1;
//Allows switching between menu page selections
pageselection = 0;
//Allows switching between individual options in page selections
subselection = 0;
//Controls which menu page is active
layer = 0;

menu_a=0;
menu_b=0;
menu_c=0;
menu_d=0;
menu_e=0;

hue_menu = floor(colour_get_hue(global.frameColor)/15)
sat_menu = floor(colour_get_saturation(global.frameColor)/15);
value_menu = floor(colour_get_value(global.frameColor)/15);

hue_boarder = floor(colour_get_hue(global.frameColor2)/15);
sat_boarder = floor(colour_get_saturation(global.frameColor2)/15);
value_boarder = floor(colour_get_value(global.frameColor2)/15);

//shadeselection = 0;

color_name = "Colour";
event_user(0);
//Used to shift off and main color for animation effect
//Only needs to be run once, so it is kept seperate from color control event which is called
//when color is changed. But these numbers mean nothing unless color control event is called 
//before they are acted upon.
shift = 0;
//used to determine current shift direction in menu color
color_dir = 1;
transparency = 0.95;
menu_scale = 1.15;
select_mult= 1.05






//Used to hold an arrow in place while other actions are taken
locked = 0;

//Set Font
draw_set_font(global.myFont);
//Set base Menu Text

menu_name1 = "Atlas";
menu_name2 = "Status";
menu_name3 = "Stock";
menu_name4 = "Automata";
menu_name5 = "Settings";

titletext = menu_name1;
subtext1 = "Close";
subtext2 = "Cancel";
subtext3 = "Confirm";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_pause_control){
    event_user(0);
    instance_deactivate_all(1);
    instance_activate_object(obj_display_control);
    instance_activate_object(obj_pause_menu);
    instance_activate_object(obj_actor_control);
    instance_activate_object(obj_fade);
    //instance_activate_object(obj_actor_menu);
};

scalex = 2 * (display_get_gui_width() / sprite_get_width(spr_fade));
scaley = 2* (display_get_gui_height() / sprite_get_height(spr_fade));

if instance_exists(obj_fade){
    with(obj_fade){
        delete = 1;
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shift=shift+color_dir;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activation animation control
if (select_menu_slide ==1){

///0.793 represents the height of the arc, and the point at which the 
//selected option remains while the others bounce back. If it increases
//by 10 at the this point, it will still reach over, and bounce back some.
//Something about menu_X must be changed to ensure the selected option
//effectively freezes and doesn't bounce back
    //Focused Selection determination
    switch (menuselection){
        case 1:
            titletext = menu_name1;
            menu_a=10;
            menu_b=0;
            menu_c=0;
            menu_d=0;
            menu_e=0;
            break;
            
        case 2:
            titletext = menu_name2;
            menu_a=0;
            menu_b=10;
            menu_c=0;
            menu_d=0;
            menu_e=0;
            break;
        case 3:
            titletext = menu_name3;
            menu_a=0;
            menu_b=0;
            menu_c=10;
            menu_d=0;
            menu_e=0;
            break;
        case 4:
         titletext = menu_name4;
            menu_a=0;
            menu_b=0;
            menu_c=0;
            menu_d=10;
            menu_e=0;
            break;
        case 5:
            titletext = menu_name5;
            menu_a=0;
            menu_b=0;
            menu_c=0;
            menu_d=0;
            menu_e=10;
            break;
    };
}else{
        menu_a=0;
        menu_b=0;
        menu_c=0;
        menu_d=0;
        menu_e=0;

};


//If animating variable is on (upon activation and deactivation)
if (animating == 1){
    //Add to sliding variable to animate menu opening
    // This should be reversed upon deactivation
    select_menu_slide = min(select_menu_slide + slide_delta, 1);
    //If sliding variable is more than 1 during activation
    if ((select_menu_slide&gt;=0.8)||(slide_delta &lt;0)){
        main_menu_slide = min(main_menu_slide + slide_delta, 1);
    };
    if ((main_menu_slide&gt;=0.1)||(slide_delta &lt;0)){
        submenu_slide1 = min(submenu_slide1 + slide_delta, 1);
    };
    if ((submenu_slide1&gt;=0.1)||(slide_delta &lt;0)){
        submenu_slide2 = min(submenu_slide2 + slide_delta, 1);
    };
    if (submenu_slide2 &gt;=1){
        //Turn off animation variable
        animating = 0;
        //reset variable to 1
        select_menu_slide = 1;
        main_menu_slide = 1;
        submenu_slide1 = 1;
        submenu_slide2 = 1;
    };
    
    if (select_menu_slide &gt;=1){
        //Turn menu control on.
        menu_on = 1;
    };
    //If sliding varaible is more than 0 during deactivation
    if (select_menu_slide &lt;=0){
        //Destroy menu object
        instance_destroy();
    };
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Interaction

///Menu Control
if (menu_on == 1){

    //menuselection menu
    if (layer == 0){
        if (keyboard_check_pressed(global.btn_Left)||keyboard_check_pressed(global.btn_Up)){
            menuselection--;
        }
        if (keyboard_check_pressed(global.btn_Right)||keyboard_check_pressed(global.btn_Down)){
            menuselection++;
        };
        if (menuselection &gt;5){
            menuselection = 1;
        }
        if (menuselection &lt;1){
            menuselection = 5;
        }
        if (keyboard_check_pressed(global.btn_A)){
               layer = menuselection;      
        };

    //Atlas menu
    } else if (layer == 1){
        if (keyboard_check_pressed(global.btn_B)){
               layer = 0;      
        };
    //Stock menu
    } else if (layer == 2){
        if (keyboard_check_pressed(global.btn_B)){
               layer = 0;      
        };
    //Status menu
    }else if (layer == 3){
        if (keyboard_check_pressed(global.btn_B)){
               layer = 0;     
        };
    //Automata menu
    }else if (layer == 4){
        if (keyboard_check_pressed(global.btn_B)){
               layer = 0;      
        };
    //System menu
    }else if (layer == 5){
        if (locked == 0){
            if (keyboard_check_pressed(global.btn_Left)||keyboard_check_pressed(global.btn_Up)){
                pageselection--;
            }
            if (keyboard_check_pressed(global.btn_Right)||keyboard_check_pressed(global.btn_Down)){
                pageselection++;
            };
            if (pageselection &gt;=4){
                pageselection = 1;
            }
            if (pageselection &lt;=0){
                pageselection = 3;
            };
        };
        //If menuselection 1 "Menu Color" is selected
        if (pageselection == 1){
            //Selector enters locked level 1 (submenu state)
            if (keyboard_check_pressed(global.btn_A)){
                if (locked == 0){
                    locked = 1;
                };
            };
            //Player can then switch between Color and Shade
            if (locked == 1){
                if (keyboard_check_pressed(global.btn_Up)){
                    subselection--;
                }
                if (keyboard_check_pressed(global.btn_Down)){
                    subselection++;
                };
                if (subselection &gt;2)subselection = 0;
                if (subselection &lt;0)subselection = 2;
            
                //Submenuselection 1 will then let the player change frame hue
                if (subselection == 0){
                    current_hue = colour_get_hue(global.frameColor);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_hue =current_hue + 15;
                        hue_menu++;
                        if (current_hue &gt;=255){
                            current_hue=current_hue-255;
                            hue_menu =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_hue =current_hue - 15;
                        hue_menu--;
                         if (current_hue &lt;0){
                            current_hue=255+current_hue;
                            hue_menu = 16;
                        }
                    };
                    global.frameColor = make_colour_hsv(current_hue,colour_get_saturation(global.frameColor),colour_get_value(global.frameColor));
                    //Call creation event to update menu information
                    event_user(0);
                }
                //Submenuselection 2 will then let the player change frame saturation
                if (subselection == 1){
                    current_sat = colour_get_saturation(global.frameColor);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_sat =current_sat + 15;
                        sat_menu++;
                        if (current_sat &gt;=255){
                            current_sat=current_sat-255;
                            sat_menu =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_sat =current_sat - 15;
                        sat_menu--;
                         if (current_sat &lt;0){
                            current_sat=255+current_sat;
                            sat_menu = 16;
                        }
                    };
                    global.frameColor = make_colour_hsv(colour_get_hue(global.frameColor),current_sat,colour_get_value(global.frameColor));
                    //Call creation event to update menu information
                    event_user(0);
                };
                
                //Submenuselection 3 will then let the player change frame value
                if (subselection == 2){
                    current_value = colour_get_value(global.frameColor);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_value =current_value + 15;
                        value_menu++;
                        if (current_value &gt;=255){
                            current_value=current_value-255;
                            value_menu =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_value =current_value - 15;
                        value_menu--;
                         if (current_value &lt;0){
                            current_value=255+current_value;
                            value_menu = 16;
                        }
                    };
                    global.frameColor = make_colour_hsv(colour_get_hue(global.frameColor),colour_get_saturation(global.frameColor),current_value);
                    //Call creation event to update menu information
                    event_user(0);
                };
                
                

            };
        };
        
        
        
        //If menuselection 2 "Boarder Color" is selected
        if (pageselection == 2){
            //Selector enters locked level 1 (submenu state)
            if (keyboard_check_pressed(global.btn_A)){
                if (locked == 0){
                    locked = 2;
                };
            };
            //Player can then switch between Color and Shade
            if (locked == 2){
                if (keyboard_check_pressed(global.btn_Up)){
                    subselection--;
                }
                if (keyboard_check_pressed(global.btn_Down)){
                    subselection++;
                };
                if (subselection &gt;2)subselection = 0;
                if (subselection &lt;0)subselection = 2;
            
                //Submenuselection 1 will then let the player change frame hue
                if (subselection == 0){
                    current_hue = colour_get_hue(global.frameColor2);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_hue =current_hue + 15;
                        hue_boarder++;
                        if (current_hue &gt;=255){
                            current_hue=current_hue-255;
                            hue_boarder =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_hue =current_hue - 15;
                        hue_boarder--;
                         if (current_hue &lt;0){
                            current_hue=255+current_hue;
                            hue_boarder = 16;
                        }
                    };
                    global.frameColor2 = make_colour_hsv(current_hue,colour_get_saturation(global.frameColor2),colour_get_value(global.frameColor2));
                    //Call creation event to update menu information
                    event_user(0);
                }
                //Submenuselection 2 will then let the player change frame saturation
                if (subselection == 1){
                    current_sat = colour_get_saturation(global.frameColor2);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_sat =current_sat + 15;
                        sat_boarder++;
                        if (current_sat &gt;=255){
                            current_sat=current_sat-255;
                            sat_boarder =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_sat =current_sat - 15;
                        sat_boarder--;
                         if (current_sat &lt;0){
                            current_sat=255+current_sat;
                            sat_boarder = 16;
                        }
                    };
                    global.frameColor2 = make_colour_hsv(colour_get_hue(global.frameColor2),current_sat,colour_get_value(global.frameColor2));
                    //Call creation event to update menu information
                    event_user(0);
                };
                
                //Submenuselection 3 will then let the player change frame value
                if (subselection == 2){
                    current_value = colour_get_value(global.frameColor2);
                    if (keyboard_check_pressed(global.btn_Right)){
                        current_value =current_value + 15;
                        value_boarder++;
                        if (current_value &gt;=255){
                            current_value=current_value-255;
                            value_boarder =0;
                        }
                    };
                    if (keyboard_check_pressed(global.btn_Left)){
                        current_value =current_value - 15;
                        value_boarder--;
                         if (current_value &lt;0){
                            current_value=255+current_value;
                            value_boarder = 16;
                        }
                    };
                    global.frameColor2 = make_colour_hsv(colour_get_hue(global.frameColor2),colour_get_saturation(global.frameColor2),current_value);
                    //Call creation event to update menu information
                    event_user(0);
                };
                
                

            };
        };
        
        
        
        //menuselection 3 will increase zoom
        if (pageselection == 3){
            if (keyboard_check_pressed(global.btn_A)){
                with (obj_display_control){
                    //Switch fullscreen
                    event_user(1);
                };
            };   
        };
        
        
        
        if (keyboard_check_pressed(global.btn_B)){
            if (locked &gt;0){
                locked = 0;
            }else{
               layer = 0;
            };      
        };
        
        //For arrow animation
        if (locked &gt;0){
            arrow = room_speed/4;
        }else{
            arrow = 0;
        }
    //Skill menu
    }else if (layer == 6){
    
    
    };
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Color Animation

color_main = make_color_hsv(color_get_hue(menu_shade1), color_get_saturation(menu_shade1), color_get_value(menu_shade1)+shift);
color_off = make_color_hsv(color_get_hue(menu_shade1), color_get_saturation(menu_shade1), color_get_value(menu_shade1)-shift+5);


if (alarm[0] == -1){
    if(shift &lt;=28){
        alarm[0] = 5;
    };
};

if (shift &gt;= 28){
    color_dir = -1;
};

if (shift &lt;=-28){
    color_dir = 1;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu appearence
//Used to apply player chosen frame color to menu
menu_shade1 = global.frameColor;
menu_shade2 = global.frameColor2;
//Used to control main menu color
color_main = menu_shade1;
//Used to control off menu color
color_off = menu_shade1;
//Used to control sub menu color
submenu_color = make_color_hsv(color_get_hue(menu_shade1), color_get_saturation(menu_shade1), color_get_value(menu_shade1)+20);
//Used to give current color a name

test =colour_get_hue(menu_shade1);
test2 = colour_get_saturation(menu_shade1); 
test3 = colour_get_value(menu_shade1);
/**
switch (colour_get_hue(menu_shade1))
   {
   case 15:
      color_name = "Peach";
      break;
   case 32:
      color_name = "Flax";
      break;
   case 49:
      color_name = "Olive";
      break;
   case 66:
      color_name = "Lime";
      break;
   case 83:
      color_name = "Fern"
      break;
   case 100:
      color_name = "Sea"
      break;
   case 117:
      color_name = "Turquoise"
      break;
   case 134:
      color_name = "Sky";
      break;
   case 151:
      color_name = "Azure"
      break;
   case 168:
      color_name = "Iris"
      break;
   case 185:
      color_name = "Lavender"
      break;
   case 202:
      color_name = "Lilac";
      break;
   case 219:
      color_name = "Orchid";
      break;
   case 236:
      color_name = "Hibiscus";
      break;
   case 253:
      color_name = "Rose";
      break;
   }
   
   switch (colour_get_hue(menu_shade2))
   {
   case 15:
      secondary_name = "Peach";
      break;
   case 32:
      secondary_name = "Flax";
      break;
   case 49:
      secondary_name = "Olive";
      break;
   case 66:
      secondary_name = "Lime";
      break;
   case 83:
      secondary_name = "Fern"
      break;
   case 100:
      secondary_name = "Sea"
      break;
   case 117:
      secondary_name = "Turquoise"
      break;
   case 134:
      secondary_name = "Sky";
      break;
   case 151:
      secondary_name = "Azure"
      break;
   case 168:
      secondary_name = "Iris"
      break;
   case 185:
      secondary_name = "Lavender"
      break;
   case 202:
      secondary_name = "Lilac";
      break;
   case 219:
      secondary_name = "Orchid";
      break;
   case 236:
      secondary_name = "Hibiscus";
      break;
   case 253:
      secondary_name = "Rose";
      break;
   }
   **/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constant Menu Drawings

//Draw Menu shadow
draw_sprite_ext(spr_fade,0,0,0,scalex,scaley,0,menu_shade1,0.5);

///
//select_slide_from + (sin(slide_now*pi/2) * (select_slide_to - select_slide_from))
//slide_now increases from 0 to 1 over time.
//select_slide_from(0) + (slide_now(0) *(select_slide_to(100)-select_slide_from(0))(100))
//startpoint plus changing_fraction X difference(amount to be moved)
//y=sin(x*pi/2) creates a slowing speed curve
//y=k*sin(x*pi/h) where k increases amplitued and heightens the speed curve over the intended end point
//h in place of 2 can be used to decrease frequency, drawing back this heightened curve to still end
// at the proper end point after falling. This creates a bounce effect.

//Primary Window -Background
draw_background_stretched_ext(bg_menu1,main_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * main_slide_from), 0, (display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-sprite_get_height(spr_menu_bar), (display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-sprite_get_height(spr_menu_bar),color_main,0.8);//0.8
draw_background_stretched_ext(bg_menu2,main_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * main_slide_from), 0, (display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-sprite_get_height(spr_menu_bar), (display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-sprite_get_height(spr_menu_bar),color_off,0.8);//0.8
//Primary Window -Bottom Bar
draw_sprite_ext(spr_menu_bar,0,main_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * main_slide_from),display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4),((display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-(sprite_get_width(spr_menu_corner)))/sprite_get_width(spr_menu_bar),-1,0,menu_shade2,1);
//Primary Window -Right Bar
draw_sprite_ext(spr_menu_bar,0,(main_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * main_slide_from))+main_slide_to,0,((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-(sprite_get_height(spr_menu_corner)))/sprite_get_width(spr_menu_bar),1,270,menu_shade2,1);
//Primary Window -Bottom Right
draw_sprite_ext(spr_menu_corner,0,(main_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * main_slide_from))+main_slide_to,display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4),1,1,180,menu_shade2,1);




//Title Window -Background
draw_background_stretched_ext(bg_menu,-4, (title_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * title_slide_from))-8, (display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-sprite_get_width(spr_menu_bar), (title_slide_to/sprite_get_width(spr_menu_bar))+8,color_main,0.5);//0.8
draw_background_stretched_ext(bg_menu,-4, (title_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * title_slide_from))-8, (display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-sprite_get_width(spr_menu_bar), (title_slide_to/sprite_get_width(spr_menu_bar))+8,color_off,0.5);//0.8
//Title Window -Bottom Bar
draw_sprite_ext(spr_menu_bar,0,-4,title_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * title_slide_from-title_slide_to),((display_get_gui_width()-(sprite_get_width(spr_menu_hub)/6))-(sprite_get_width(spr_menu_corner)))/sprite_get_width(spr_menu_bar),-1,0,menu_shade2,1);
//Title Window -Right Bar
//The length of the bar is increased and the starting point doubled to further off screen to ensure the bar doesn't break from the edge when bouncing
draw_sprite_ext(spr_menu_bar,0,main_slide_to-4,((title_slide_from*1.5) - (1.09*sin(pi*(submenu_slide1/1.587)) * title_slide_from)),title_slide_to/sprite_get_width(spr_menu_bar),1,270,menu_shade2,1);
//Title Window -Bottom Right
draw_sprite_ext(spr_menu_corner,0,main_slide_to-4,(title_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * title_slide_from-title_slide_to)),1,1,180,menu_shade2,1);
//Title
draw_text(((main_slide_to/2)-(string_width(titletext)/2))+48,(title_slide_from  - (1.09*sin(pi*(submenu_slide2/1.587)) * title_slide_from))+((title_slide_to/2)-string_height(titletext)/2),titletext);






//SubBox 3 "bottom right"
draw_sprite_ext(spr_menu_subbox,0,submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to3)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*1.5),1,1,0,menu_shade1,1);
draw_sprite_ext(spr_menu_subbox,1,submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to3)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*1.5),1,1,0,menu_shade2,1);
draw_sprite_ext(spr_buttons,2,submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to3))+(sprite_get_width(spr_menu_subbox)/2),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*1.5)+sprite_get_height(spr_buttons),1,1,0,c_white,1);
draw_text((submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to3)))+(string_width(subtext1)*1.6),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*1.5)+sprite_get_height(spr_buttons)+(string_height(subtext1)/2),subtext1);
//SubBox 2 "middle center"
draw_sprite_ext(spr_menu_subbox,0,submenu_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * (submenu_slide_from-submenu_slide_to2)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2),1,1,0,menu_shade1,1);
draw_sprite_ext(spr_menu_subbox,1,submenu_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * (submenu_slide_from-submenu_slide_to2)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2),1,1,0,menu_shade2,1);
draw_sprite_ext(spr_buttons,1,submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to2))+(sprite_get_width(spr_menu_subbox)/2),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2)+sprite_get_height(spr_buttons)+4,1,1,0,c_white,1);
draw_text((submenu_slide_from - (1.09*sin(pi*(submenu_slide1/1.587)) * (submenu_slide_from-submenu_slide_to2)))+(string_width(subtext2)*1.25),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2)+sprite_get_height(spr_buttons)+(string_height(subtext1)/2)+6,subtext2);
//SubBox 1 "top left"
draw_sprite_ext(spr_menu_subbox,0,submenu_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * (submenu_slide_from-submenu_slide_to1)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2.5),1,1,0,menu_shade1,1);
draw_sprite_ext(spr_menu_subbox,1,submenu_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * (submenu_slide_from-submenu_slide_to1)),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2.5),1,1,0,menu_shade2,1);
draw_sprite_ext(spr_buttons,0,submenu_slide_from - (1.09*sin(pi*(submenu_slide2/1.587)) * (submenu_slide_from-submenu_slide_to1))+(sprite_get_width(spr_menu_subbox)/2),display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2.5)+sprite_get_height(spr_buttons)+8,1,1,0,c_white,1);
draw_text((submenu_slide_from - (1.09*sin(pi*(main_menu_slide/1.587)) * (submenu_slide_from-submenu_slide_to1)))+(string_width(subtext3)*1.1)-4,display_get_gui_height()-((sprite_get_height(spr_menu_subbox)/4)*2.5)+sprite_get_height(spr_buttons)+(string_height(subtext1)/2)+12,subtext3);

//Selection Window -Background
draw_sprite_ext(spr_pause_bar,0, 0, select_slide_from - (sin(select_menu_slide * pi / 2) * (select_slide_from-select_slide_to)),sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,clamp(0.5+select_menu_slide,0.25,1));
//Selection Window -Boarder
draw_sprite_ext(spr_pause_bar,1, 0, select_slide_from - (sin(select_menu_slide * pi / 2) * (select_slide_from-select_slide_to)),sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,clamp(0.5+select_menu_slide,0.25,1));


//(sin(select_menu_slide * pi / 2)
// menu_a + (select_slide_from2 - (sin(select_menu_slide * pi / 2) * (select_slide_from2-select_slide_to2)))
//Selection Widow -Selection 1 "Atlas"
draw_sprite_ext(spr_pause_option,0, menu_a + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),0,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,transparency);
draw_sprite_ext(spr_pause_option,1, menu_a + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),0,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,transparency);
draw_text(menu_a + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2)))+((sprite_get_width(spr_pause_option)/2)-(string_width(menu_name1)/2)),(sprite_get_height(spr_pause_option)/2)-(string_height(menu_name1)/2),menu_name1);
//Selection Widow -Selection 2 "Status"
draw_sprite_ext(spr_pause_option,0, menu_b + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32),sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,transparency);
draw_sprite_ext(spr_pause_option,1, menu_b + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32),sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,transparency);
draw_text(menu_b + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2)))+((sprite_get_width(spr_pause_option)/2)-(string_width(menu_name2)/2)),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)+((sprite_get_height(spr_pause_option)/2)-(string_height(menu_name2)/2)),menu_name2);
//Selection Widow -Selection 3 "Stock"
draw_sprite_ext(spr_pause_option,0, menu_c + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*2,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,transparency);
draw_sprite_ext(spr_pause_option,1, menu_c + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*2,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,transparency);
draw_text(menu_c + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2)))+((sprite_get_width(spr_pause_option)/2)-(string_width(menu_name3)/2)),((sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*2)+((sprite_get_height(spr_pause_option)/2)-(string_height(menu_name3)/2)),menu_name3);
//Selection Widow -Selection 4 "Automata"
draw_sprite_ext(spr_pause_option,0, menu_d + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*3,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,transparency);
draw_sprite_ext(spr_pause_option,1, menu_d + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*3,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,transparency);
draw_text(menu_d + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2)))+((sprite_get_width(spr_pause_option)/2)-(string_width(menu_name4)/2)),((sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*3)+((sprite_get_height(spr_pause_option)/2)-(string_height(menu_name4)/2)),menu_name4);
//Selection Widow -Selection 5 "Settings"
draw_sprite_ext(spr_pause_option,0, menu_e + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*4,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade1,transparency);
draw_sprite_ext(spr_pause_option,1, menu_e + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2))),(sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*4,sprite_get_width(spr_pause_bar)/((sprite_get_width(spr_menu_hub)/2)+7),display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4),0,menu_shade2,transparency);
draw_text(menu_e + (select_slide_from2 - (1.09*sin(pi*(select_menu_slide/1.587)) * (select_slide_from2-select_slide_to2)))+((sprite_get_width(spr_pause_option)/2)-(string_width(menu_name5)/2)),((sprite_get_height(spr_pause_bar)*(display_get_gui_height()/(sprite_get_height(spr_pause_bar)/4))/32)*4)+((sprite_get_height(spr_pause_option)/2)-(string_height(menu_name5)/2)),menu_name5);
   


draw_sprite_ext(spr_menu_hub,3, 4, display_get_gui_height()-4,1,1,0,menu_shade1,1);
draw_sprite_ext(spr_menu_hub,2, 4, display_get_gui_height()-4,1,1,0,menu_shade2,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection Specific Drawings 

//Menu Option displays
if (menu_on=1){
    
    
    
    //Selection Menu
    if (layer == 0){
        
 
    };
    //Main menu, always present?
    //if (layer &gt;0){

    //};
    //Atlas Menu
    if (layer == 1){
            
        switch (menuselection){
        case 1:
            
            break;
            
        case 2:    
            
            break;
            
        case 3:
            
            break;
            
        case 4:    
            
            break;
            
        case 5:    
            
            break;
       }
    
    };
    
    //Status Menu
    if (layer == 2){

        switch (menuselection){
        case 1:

            break;
            
        case 2:    
            
            break;
            
        case 3:
            
            break;
            
        case 4:    
            
            break;
            
        case 5:    
            
            break;
       }
    
    };
    
    
    
    
    //Stock Menu
    if (layer == 3){


        switch (menuselection){
        case 1:

            break;
            
        case 2:    
            
            break;
            
        case 3:
            
            break;
            
        case 4:    
            
            break;
            
        case 5:    
            
            break;
       }
    
    };
    
    //Automata Menu
    if (layer == 4){

        switch (menuselection){
        case 1:

            break;
            
        case 2:    
            
            break;
            
        case 3:
            
            break;
            
        case 4:    
            
            break;
            
        case 5:    
            
            break;
       }
    
    }; 
    
    //Settings Menu
    if (layer == 5){

        //Draw option titles
        draw_text(sprite_get_width(spr_pause_bar)+32, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*1.5,"Menu Color")
        draw_text(sprite_get_width(spr_pause_bar)+32, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*2.5,"Border Color")
        draw_text(sprite_get_width(spr_pause_bar)+32, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*3.5,"Fullscreen")
        draw_text(sprite_get_width(spr_pause_bar)+32, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*4.5,"Text Speed")
        draw_text(((main_slide_to/2)-(string_width("Input Mapping")/2))+48, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*5.5,"Input Mapping")

        
        //draw_sprite(spr_color_example,0,(main_slide_to/5)*3,(((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*1.5-4);
        //(spr_color_example,0,(main_slide_to/5)*3,(((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*2.5-4);
        draw_sprite_ext(spr_color_example,0,(main_slide_to/5)*3,(((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*1.5-4,1,1,0,global.frameColor,1); 
        draw_sprite_ext(spr_color_example,0,(main_slide_to/5)*3,(((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*2.5-4,1,1,0,global.frameColor2,1); 
        
        
        draw_text((main_slide_to/5)*3.5, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*1.5,"H: "+string(floor(hue_menu*22.5))+", S: "+string(floor(sat_menu*6.25))+", V: "+string(floor(value_menu*6.25)));
        draw_text((main_slide_to/5)*3.5, (((display_get_gui_height()-(sprite_get_height(spr_menu_hub)/4))-title_slide_to)/6)*2.5,"H: "+string(floor(hue_boarder*22.5))+", S: "+string(floor(sat_boarder*6.25))+", V: "+string(floor(value_boarder*6.25)));
        
        //Draw menu color selector
        //draw_text((display_get_gui_width()/5)-(string_width("Menu Hue")/2),(((display_get_gui_height()-64)/4)),"Menu Hue");
        //draw_text((display_get_gui_width()/5)-(string_width("Menu Saturation")/2),(((display_get_gui_height()-64)/4))+34,"Menu Saturation");
        //draw_text((display_get_gui_width()/5)-(string_width("Menu Value")/2),(((display_get_gui_height()-64)/4))+64,"Menu Value");
        //colour_get_saturation(global.frameColor),colour_get_value(global.frameColor)
        
        
        
        if (pageselection == 1){
            if (locked &gt;0){
        
        
        //MENU HUE BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(0,255,255),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(15,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(30,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(45,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(60,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(75,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(90,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(105,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(120,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(135,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(150,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(165,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(180,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(195,255,222),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(210,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(225,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6))+15,1,1,0,make_color_hsv(240,255,255),1);        
        //MENU SATURATION BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),0,255),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),15,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),30,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),45,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),60,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),75,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),90,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),105,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),120,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),135,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),150,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),165,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),180,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),195,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),210,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),225,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6))+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),240,255),1);  
        //MENU VALUE BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),0,0),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,15),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,30),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,45),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,60),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,75),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,90),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,105),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,120),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,135),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,150),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,165),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,180),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,195),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,210),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,225),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6))+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor),255,240),1);  
         
                          
        };
   };
            if (pageselection == 2){
            if (locked &gt;0){
            
        
        //BORDER HUE BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(0,255,255),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(15,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(30,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(45,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(60,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(75,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(90,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(105,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(120,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(135,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(150,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(165,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(180,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(195,255,222),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(210,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(225,255,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6)*2)+15,1,1,0,make_color_hsv(240,255,255),1);        
        //BORDER SATURATION BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),0,255),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),15,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),30,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),45,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),60,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),75,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),90,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),105,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),120,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),135,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),150,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),165,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),180,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),195,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),210,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),225,255),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6)*2)+32,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),240,255),1);  
        //BORDER VALUE BAR
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),0,0),1); 
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,15),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*2),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,30),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*3),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,45),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*4),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,60),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*5),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,75),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*6),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,90),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*7),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,105),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*8),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,120),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*9),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,135),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*10),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,150),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*11),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,165),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*12),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,180),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*13),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,195),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*14),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,210),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*15),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,225),1);
        draw_sprite_ext(spr_colorbar,0,((display_get_gui_width()/5)*2)+((sprite_get_width(spr_colorbar)-6)*16),(((display_get_gui_height()-64)/6)*2)+49,1,1,0,make_color_hsv(colour_get_hue(global.frameColor2),255,240),1);  
  };       
};
        
        //Selectors
        //draw_sprite(spr_color_select,0,(((display_get_gui_width()/3)*2)-142)+((sprite_get_width(spr_colorbar)-6)*colorselection),(((display_get_gui_height()-64)/4))+30);
        //draw_sprite(spr_color_select,0,(((display_get_gui_width()/3)*2)-142)-((sprite_get_width(spr_colorbar)-6)*shadeselection),(((display_get_gui_height()-64)/4))+62);
        
        //draw_text(((display_get_gui_width()/3)*2)-(string_width(color_name)/2),(((display_get_gui_height()-64)/4))+32,color_name);
        /**
        //Draw frame color selector
        draw_text((display_get_gui_width()/3)-(string_width("Menu color")/2),(((display_get_gui_height()-64)/4)*2)+32,"Frame color");
        //draw_text(((display_get_gui_width()/3)*2)-(string_width(secondary_name)/2),(((display_get_gui_height()-64)/4)*2)+32,secondary_name);

        //Draw Full screen selector
        draw_text((display_get_gui_width()/3)-(string_width("Fullscreen")/2),(((display_get_gui_height()-64)/4)*3)+32,"Fullscreen");
        if (window_get_fullscreen()){
            draw_sprite(spr_selectbox,1,((display_get_gui_width()/3)*2)-(sprite_get_width(spr_selectbox)/2),((((display_get_gui_height()-64)/4)*3)+32)-(sprite_get_height(spr_selectbox)/2));
        }else{
            draw_sprite(spr_selectbox,0,((display_get_gui_width()/3)*2)-(sprite_get_width(spr_selectbox)/2),((((display_get_gui_height()-64)/4)*3)+32)-(sprite_get_height(spr_selectbox)/2));
        };
        
**/       

        
        
        
        
        
    
        //Draw moving arrow
        if (locked ==0){
            draw_sprite(spr_arrow,0,((display_get_gui_width()/3)*2)+64,(((display_get_gui_height()-64)/4)*pageselection)+32);
        }else{
            draw_sprite(spr_arrow,image_index/2,((display_get_gui_width()/3)*2)+52,(((display_get_gui_height()-64)/4)*pageselection)+32);
        };
        
        
        
        switch (menuselection){
        case 1:

            break;
            
        case 2:    
            
            break;
            
        case 3:
            
            break;
            
        case 4:    
            
            break;
            
        case 5:    
            
            break;
       }
    
    };

};


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
