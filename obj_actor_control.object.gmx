<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Database Creation


//All possible stat growths
growth_A = ds_grid_create(31,7);
growth_B = ds_grid_create(31,7);
growth_C = ds_grid_create(31,7);
growth_D = ds_grid_create(31,7);

//All possible character skills
skilltree_A = ds_grid_create(36,6);
skilltree_B = ds_grid_create(36,6);
skilltree_C = ds_grid_create(36,6);
skilltree_D = ds_grid_create(36,6);

//All current attributes
attributes_A = ds_list_create();
attributes_B = ds_list_create();
attributes_C = ds_list_create();
attributes_D = ds_list_create();



//Class list, representing stats, stat growths, skill tree, and active flag
character_list = ds_grid_create(4,4);



//Class list
//4 Character, 3 contstituate parts + 1 flag
//Class = class ID &gt; urrent Name and Stats, Stat Growth, Skill Tree

//Engineer Character
character_list[# 0,0 ] = attributes_A;
character_list[# 0,1 ] = growth_A;
character_list[# 0,2 ] = skilltree_A;
character_list[# 0,3 ] = 1;
//Witch Character
character_list[# 1,0 ] = attributes_B;
character_list[# 1,1 ] = growth_B;
character_list[# 1,2 ] = skilltree_B;
character_list[# 1,3 ] = 1;
//Knight Character
character_list[# 2,0 ] = attributes_C;
character_list[# 2,1 ] = growth_C;
character_list[# 2,2 ] = skilltree_C;
character_list[# 2,3 ] = 1;
//Medic Character
character_list[# 3,0 ] = attributes_D
character_list[# 3,1 ] = growth_D;
character_list[# 3,2 ] = skilltree_D;
character_list[# 3,3 ] = 1;






//Used for debugging
actor = 0;
page = 0;
character_page = 0;
section = 1;

//Accessed by storing the curve with in the list to a temporary variable 
//var current_curve = growth_curves[| 2]; &lt; this would be curve_b 
//current_grid[# 0, 1] = 99; 
//This can aparently be set to access through a script

//Skill Types

//Item Array

//Monster Array
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Current Attribute Database

//Current Character attributes.
// 4 Characters, 14 statistics increased per level
//Character = NAME,CLASS,LVL,EXP,SP,M.HP,M.MP,ATK,DEF,SPE,CRIT,EVADE,HP,MP

//Loop through each character's attribute list in list
for (var a=0;a&lt;4;a++){
    //Pull current grid from list to be operated on 
    var current_character = character_list[# a,0];
    //Loop through each attribute in the current level
    for (var b=0;b&lt;14;b++){
    
        //CHECK FOR LOAD DATA
        //IF IT EXISTS
            //LOOP THROUGH AND LOAD IT INTO DATABASE
        //Actually, it might work better if there is a "loaded game" flag that is flipped
        //When a file is checked for and loaded at the start up menu, while this load flag is flipped
        //This instantiation loop is skipped and the data from the load file is pulled instead.
        
        
        //IF IT DOESN'T EXIST
        
        //if attribute is name
        if (b==0){
            if (a ==0){
                current_character[| b] = "Eli";
            };
            if (a ==1){
                current_character[| b] = "Marie";
            };
            if (a ==2){
                current_character[| b] = "Gwyn";
            };
            if (a ==3){
                current_character[| b] = "Weiss";
            };
        };
        if (b==1){
            if (a ==0){
                current_character[| b] = "Tinkerer";
            };
            if (a ==1){
                current_character[| b] = "Lance Caster";
            };
            if (a ==2){
                current_character[| b] = "Knight of Arms";
            };
            if (a ==3){
                current_character[| b] = "Alchemist";
            };
        };
        if (b==2){
            //if character is engineer
            if (a ==0){
                current_character[| b] = "1";
            };
            if (a ==1){
                current_character[| b] = "1";
            };
            if (a ==2){
                current_character[| b] = "1";
            };
            if (a ==3){
                current_character[| b] = "1";
            };
        };
        if (b &gt;=3 &amp;&amp; b &lt;=9){
            //Pull current character's stat growth grid from list to be operated on 
            var current_growth = character_list[# a,1];
            current_character[| b] = current_growth[# 1,b-3];
        };
        if (b &gt;=10){
            //Last two stats are percent stats
            current_character[| b] = 0.10;
        };
        if (b ==12){
            current_character[| b] =current_character[| 5]
        };
        if (b == 13){
            current_character[| b] =current_character[| 6]
        };
    };
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stat Growth Database

//Self populating stat growth array
// 30 levels, 7 statistics increased per level
//Growth = Lvl &gt; EXP,SP,HP,MP,ATK,DEF,SPE

//Loop through each character's growth grid in list
for (var a=0;a&lt;4;a++){
    //Pull current grid from list to be operated on 
    var current_growth = character_list[# a,1];
    //Loop through each level in growth grid
    for (var b=0;b&lt;31;b++){
        //Loop through each attribute in the current level
        for (var c=0;c&lt;7;c++){
            
        
            //////////if attribute is exp
            if (c==0){
                //preset attribute if level 0
                if (b==0){
                    current_growth[# b,c] = 25;
                }else{
                    //current EXP = previous level's exp + 25*current level + how many times 
                    //5 can go into the current level whole * 5
                    current_growth[# b,c] = current_growth[# (b-1),c] + (25*b)+ ((b div 5)*5);
                };               
              
            //////////if attribute is skill points
            } else if (c==1){
                //preset attribute if level 0
                if (b==0){
                    current_growth[# b,c] = 0;
                } else{
                    //current Skill point is 0 if number is evenly divisable by 5.
                    if ((b==1)||(b==7)||(b==13)||(b==17)||(b==21)||(b==24)||(b==27)||(b&gt;=29)) {
                        current_growth[# b,c] = 0;
                    //current skill point is 1 if anything else.
                    }else{
                        current_growth[# b,c] = 1;
                    }
                }

            //if attribute is any other base attribute
            }else{
                //preset attribute if level 0, regardless of character or base attribute;
                if (b==0){
                    current_growth[# b,c] = 0
                };
            
                //select growth ranges based on attribute
                
                //////////if attribute is HP    
                if (c==2){
                    
                    //select specific growth based on character
                
                    ///////if character is Engineer
                    if (a == 0){
                        
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 1*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        };
                     
                    ///////if character is Witch
                    }else if (a == 1){
                        
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                        };
                    
                    ///////if character is Knight
                    }else if (a == 2){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4*10;
                        };
                    
                    
                    ///////if character is Medic
                    }else if (a == 3){
                    
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 5*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        };
                    
                    };          
                
                //////////if attribute is MP    
                } else if (c==3){
                    
                    //select specific growth based on character
                
                    ///////if character is Engineer
                    if (a == 0){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 5*10;
                        };
                        
                    ///////if character is Witch
                    }else if (a == 1){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        };
                    
                    ///////if character is Knight
                    }else if (a == 2){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                        };
                    
                    
                    ///////if character is Medic
                    }else if (a == 3){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4*10;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3*10;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2*10;
                        };
                    
                    };          
                
                
                ///////////if attribute is ATK    
                } else if (c==4){
                    
                    //select specific growth based on character
                
                    ///////if character is Engineer
                    if (a == 0){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        };
                        
                    ///////if character is Witch
                    }else if (a == 1){
                    
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 5;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        };
                    
                    ///////if character is Knight
                    }else if (a == 2){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        };
                    
                    
                    ///////if character is Medic
                    }else if (a == 3){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 1;
                        };
                    
                    };          
                
                
                //////////if attribute is DEF    
                } else if (c==5){
                    
                    //select specific growth based on character
                
                    ///////if character is Engineer
                    if (a == 0){
                    
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        };
                        
                    ///////if character is Witch
                    }else if (a == 1){
 
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 1;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                        };
                    
                    ///////if character is Knight
                    }else if (a == 2){
                    
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 5;
                        };
                    
                    
                    ///////if character is Medic
                    }else if (a == 3){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        };
                    
                    };          
                
                
                //////////if attribute is SPD    
                } else if (c==6){
                    
                    //select specific growth based on character
                
                    ///////if character is Engineer
                    if (a == 0){
                    
                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                        };
                        
                        
                    ///////if character is Witch
                    }else if (a == 1){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 4;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        };
                    
                        
                    ///////if character is Knight
                    }else if (a == 2){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 1;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        };
                    
                    
                    ///////if character is Medic
                    }else if (a == 3){

                        //if level is 1-10
                        if ((b&gt;=1)&amp;&amp;(b&lt;=10)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 3;
                        
                        //if level is 11-20
                        }else if ((b&gt;=11)&amp;&amp;(b&lt;=20)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                            
                        //if level is 21-30
                        }else if ((b&gt;=21)&amp;&amp;(b&lt;=30)){
                            //current attribute = previous + growth number
                            current_growth[# b,c] = current_growth[# b-1,c] + 2;
                        };
                    
                    };          
                
                };
            };
            
        };
    
    };

};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Skill Tree Database

//Self poulating skill trees
//48 skills, 5 attributes per skill
//Skills = skill ID &gt; Branch, Branch tier, rank, type, name, description
//Loop through each character's growth grid in list
for (var f=0;f&lt;4;f++){
    //Pull current skill grid from class list to be operated on 
    var current_tree = character_list[# f,2];
    //Loop through each skill in first branch
    for (var g=0;g&lt;12;g++){
     
        //set branch attribute
        current_tree[# g,0] = 1;
        //set branch tier
        current_tree[# g,1] = g;
        
     };
        
    for (var g=12;g&lt;24;g++){
     
        //set branch attribute
        current_tree[# g,0] = 2;
        //set branch tier
        current_tree[# g,1] = g-12;
     
        
    };
        
    for (var g=24;g&lt;36;g++){
     
        //set branch attribute
        current_tree[# g,0] = 3;
        //set branch tier
        current_tree[# g,1] = g-24;
        
    };        
    
    
    //////////if class is Engineer
    if (f ==0){
    
        //1.1. Rank, Type, Name, Description
        current_tree[# 0,2] = 0;
        current_tree[# 0,3] = 1;
        current_tree[# 0,4] = "Offen. Build";
        current_tree[# 0,5] = "Powerful Construct!";
        //1.2. Rank, Type, Name, Description
        current_tree[# 1,2] = 0;
        current_tree[# 1,3] = 0;
        current_tree[# 1,4] = "Stat Up";
        current_tree[# 1,5] = "+x to Y Stat!";
        //1.3. Rank, Type, Name, Description
        current_tree[# 2,2] = 0;
        current_tree[# 2,3] = 2;
        current_tree[# 2,4] = "Offen. Reinforce";
        current_tree[# 2,5] = "Powerful Buff!";
        //1.4. Rank, Type, Name, Description
        current_tree[# 3,2] = 0;
        current_tree[# 3,3] = 1;
        current_tree[# 3,4] = "Offen. Build";
        current_tree[# 3,5] = "Powerful Construct!";
        //1.5. Rank, Type, Name, Description
        current_tree[# 4,2] = 0;
        current_tree[# 4,3] = 0;
        current_tree[# 4,4] = "Stat Up";
        current_tree[# 4,5] = "+x to Y Stat!";        
        //1.6. Rank, Type, Name, Description
        current_tree[# 5,2] = 0;
        current_tree[# 5,3] = 2;
        current_tree[# 5,4] = "Offen. Reinforce";
        current_tree[# 5,5] = "Powerful Buff!";
        //1.7. Rank, Type, Name, Description
        current_tree[# 6,2] = 0;
        current_tree[# 6,3] = 1;
        current_tree[# 6,4] = "Offen. Build";
        current_tree[# 6,5] = "Powerful Construct!";        
        //1.8. Rank, Type, Name, Description
        current_tree[# 7,2] = 0;
        current_tree[# 7,3] = 0;
        current_tree[# 7,4] = "Stat Up";
        current_tree[# 7,5] = "+x to Y Stat!";        
        //1.9. Rank, Type, Name, Description
        current_tree[# 8,2] = 0;
        current_tree[# 8,3] = 2;
        current_tree[# 8,4] = "Offen. Reinforce";
        current_tree[# 8,5] = "Powerful Buff!";        
        //1.10. Rank, Type, Name, Description
        current_tree[# 9,2] = 0;
        current_tree[# 9,3] = 1;
        current_tree[# 9,4] = "Offen. Build";
        current_tree[# 9,5] = "Powerful Construct!";        
        //1.11. Rank, Type, Name, Description
        current_tree[# 10,2] = 0;
        current_tree[# 10,3] = 0;
        current_tree[# 10,4] = "Stat Up";
        current_tree[# 10,5] = "+x to Y Stat!";        
        //1.12. Rank, Type, Name, Description
        current_tree[# 11,2] = 0;
        current_tree[# 11,3] = 2;
        current_tree[# 11,4] = "Final Reinforce";
        current_tree[# 11,5] = "Special Buff!";        
      
        //2.1. Rank, Type, Name, Description
        current_tree[# 12,2] = 0;
        current_tree[# 12,3] = 1;
        current_tree[# 12,4] = "Supp. Build";
        current_tree[# 12,5] = "Helpful Construct!";
        //2.2. Rank, Type, Name, Description
        current_tree[# 13,2] = 0;
        current_tree[# 13,3] = 0;
        current_tree[# 13,4] = "Stat Up";
        current_tree[# 13,5] = "+x to Y Stat!";
        //2.3. Rank, Type, Name, Description
        current_tree[# 14,2] = 0;
        current_tree[# 14,3] = 2;
        current_tree[# 14,4] = "Supp. Reinforce";
        current_tree[# 14,5] = "Helpful Buff!";
        //2.4. Rank, Type, Name, Description
        current_tree[# 15,2] = 0;
        current_tree[# 15,3] = 1;
        current_tree[# 15,4] = "Supp. Build";
        current_tree[# 15,5] = "Helpful Construct!";
        //2.5. Rank, Type, Name, Description
        current_tree[# 16,2] = 0;
        current_tree[# 16,3] = 0;
        current_tree[# 16,4] = "Stat Up";
        current_tree[# 16,5] = "+x to Y Stat!";        
        //2.6. Rank, Type, Name, Description
        current_tree[# 17,2] = 0;
        current_tree[# 17,3] = 2;
        current_tree[# 17,4] = "Supp. Reinforce";
        current_tree[# 17,5] = "Helpful Buff!";
        //2.7. Rank, Type, Name, Description
        current_tree[# 18,2] = 0;
        current_tree[# 18,3] = 1;
        current_tree[# 18,4] = "Supp. Build";
        current_tree[# 18,5] = "Helpful Construct!";        
        //2.8. Rank, Type, Name, Description
        current_tree[# 19,2] = 0;
        current_tree[# 19,3] = 0;
        current_tree[# 19,4] = "Stat Up";
        current_tree[# 19,5] = "+x to Y Stat!";        
        //2.9. Rank, Type, Name, Description
        current_tree[# 20,2] = 0;
        current_tree[# 20,3] = 2;
        current_tree[# 20,4] = "Supp. Reinforce";
        current_tree[# 20,5] = "Helpful Buff!";        
        //2.10. Rank, Type, Name, Description
        current_tree[# 21,2] = 0;
        current_tree[# 21,3] = 1;
        current_tree[# 21,4] = "Supp. Build";
        current_tree[# 21,5] = "Helpful Construct!";        
        //2.11. Rank, Type, Name, Description
        current_tree[# 22,2] = 0;
        current_tree[# 22,3] = 0;
        current_tree[# 22,4] = "Stat Up";
        current_tree[# 22,5] = "+x to Y Stat!";        
        //2.12. Rank, Type, Name, Description
        current_tree[# 23,2] = 0;
        current_tree[# 23,3] = 2;
        current_tree[# 23,4] = "Final Reinforce";
        current_tree[# 23,5] = "Special Buff!";       
        
        //3.1. Rank, Type, Name, Description
        current_tree[# 24,2] = 0;
        current_tree[# 24,3] = 1;
        current_tree[# 24,4] = "Defen. Build";
        current_tree[# 24,5] = "Protective Construct!";
        //3.2. Rank, Type, Name, Description
        current_tree[# 25,2] = 0;
        current_tree[# 25,3] = 0;
        current_tree[# 25,4] = "Stat up";
        current_tree[# 25,5] = "+x to Y Stat!";
        //3.3. Rank, Type, Name, Description
        current_tree[# 26,2] = 0;
        current_tree[# 26,3] = 2;
        current_tree[# 26,4] = "Defen. Reinforce";
        current_tree[# 26,5] = "Protective Buff!";
        //3.4. Rank, Type, Name, Description
        current_tree[# 27,2] = 0;
        current_tree[# 27,3] = 1;
        current_tree[# 27,4] = "Defen. Build";
        current_tree[# 27,5] = "Protective Construct";
        //3.5. Rank, Type, Name, Description
        current_tree[# 28,2] = 0;
        current_tree[# 28,3] = 0;
        current_tree[# 28,4] = "Stat Up";
        current_tree[# 28,5] = "+x to Y Stat!";        
        //3.6. Rank, Type, Name, Description
        current_tree[# 29,2] = 0;
        current_tree[# 29,3] = 2;
        current_tree[# 29,4] = "Defen. Reinforce";
        current_tree[# 29,5] = "Protective Buff!";
        //3.7. Rank, Type, Name, Description
        current_tree[# 30,2] = 0;
        current_tree[# 30,3] = 1;
        current_tree[# 30,4] = "Defen. Build";
        current_tree[# 30,5] = "Protective Construct!";        
        //3.8. Rank, Type, Name, Description
        current_tree[# 31,2] = 0;
        current_tree[# 31,3] = 0;
        current_tree[# 31,4] = "Stat Up";
        current_tree[# 31,5] = "+x to Y Stat!";        
        //3.9. Rank, Type, Name, Description
        current_tree[# 32,2] = 0;
        current_tree[# 32,3] = 2;
        current_tree[# 32,4] = "Defen. Reinforce";
        current_tree[# 32,5] = "Protective Buff!";        
        //3.10. Rank, Type, Name, Description
        current_tree[# 33,2] = 0;
        current_tree[# 33,3] = 1;
        current_tree[# 33,4] = "Defen. Build";
        current_tree[# 33,5] = "Protective Construct!";        
        //3.11. Rank, Type, Name, Description
        current_tree[# 34,2] = 0;
        current_tree[# 34,3] = 0;
        current_tree[# 34,4] = "Stat Up";
        current_tree[# 34,5] = "+x to Y Stat!";        
        //3.12. Rank, Type, Name, Description
        current_tree[# 35,2] = 0;
        current_tree[# 35,3] = 2;
        current_tree[# 35,4] = "Final Reinforce";
        current_tree[# 35,5] = "Special Buff!";        

    
    //////////if class is Witch
    }else if (f == 1){
    
        //1.1. Rank, Type, Name, Description
        current_tree[# 0,2] = 0;
        current_tree[# 0,3] = 3;
        current_tree[# 0,4] = "Offen. Charge";
        current_tree[# 0,5] = "Powerful Spell!";
        //1.2. Rank, Type, Name, Description
        current_tree[# 1,2] = 0;
        current_tree[# 1,3] = 0;
        current_tree[# 1,4] = "Stat Up";
        current_tree[# 1,5] = "+x to Y Stat!";
        //1.3. Rank, Type, Name, Description
        current_tree[# 2,2] = 0;
        current_tree[# 2,3] = 4;
        current_tree[# 2,4] = "Offen. Strike";
        current_tree[# 2,5] = "Powerful Attack!";
        //1.4. Rank, Type, Name, Description
        current_tree[# 3,2] = 0;
        current_tree[# 3,3] = 3;
        current_tree[# 3,4] = "Offen. Charge";
        current_tree[# 3,5] = "Powerful Spell!";
        //1.5. Rank, Type, Name, Description
        current_tree[# 4,2] = 0;
        current_tree[# 4,3] = 0;
        current_tree[# 4,4] = "Stat Up";
        current_tree[# 4,5] = "+x to Y Stat!";        
        //1.6. Rank, Type, Name, Description
        current_tree[# 5,2] = 0;
        current_tree[# 5,3] = 4;
        current_tree[# 5,4] = "Offen. Strike";
        current_tree[# 5,5] = "Powerful Attack!";
        //1.7. Rank, Type, Name, Description
        current_tree[# 6,2] = 0;
        current_tree[# 6,3] = 3;
        current_tree[# 6,4] = "Offen. Charge";
        current_tree[# 6,5] = "Powerful Spell!";        
        //1.8. Rank, Type, Name, Description
        current_tree[# 7,2] = 0;
        current_tree[# 7,3] = 0;
        current_tree[# 7,4] = "Stat Up";
        current_tree[# 7,5] = "+x to Y Stat!";        
        //1.9. Rank, Type, Name, Description
        current_tree[# 8,2] = 0;
        current_tree[# 8,3] = 4;
        current_tree[# 8,4] = "Offen. Strike";
        current_tree[# 8,5] = "Powerful Attack!";        
        //1.10. Rank, Type, Name, Description
        current_tree[# 9,2] = 0;
        current_tree[# 9,3] = 3;
        current_tree[# 9,4] = "Offen. Charge";
        current_tree[# 9,5] = "Powerful Spell!";        
        //1.11. Rank, Type, Name, Description
        current_tree[# 10,2] = 0;
        current_tree[# 10,3] = 0;
        current_tree[# 10,4] = "Stat Up";
        current_tree[# 10,5] = "+x to Y Stat!";        
        //1.12. Rank, Type, Name, Description
        current_tree[# 11,2] = 0;
        current_tree[# 11,3] = 4;
        current_tree[# 11,4] = "Final Strike";
        current_tree[# 11,5] = "Special Attack!";        
      
        //2.1. Rank, Type, Name, Description
        current_tree[# 12,2] = 0;
        current_tree[# 12,3] = 3;
        current_tree[# 12,4] = "Supp. Charge";
        current_tree[# 12,5] = "Helpful Spell!";
        //2.2. Rank, Type, Name, Description
        current_tree[# 13,2] = 0;
        current_tree[# 13,3] = 0;
        current_tree[# 13,4] = "Stat Up";
        current_tree[# 13,5] = "+x to Y Stat!";
        //2.3. Rank, Type, Name, Description
        current_tree[# 14,2] = 0;
        current_tree[# 14,3] = 4;
        current_tree[# 14,4] = "Supp. Strike";
        current_tree[# 14,5] = "Helpful Attack!";
        //2.4. Rank, Type, Name, Description
        current_tree[# 15,2] = 0;
        current_tree[# 15,3] = 3;
        current_tree[# 15,4] = "Supp. Charge";
        current_tree[# 15,5] = "Helpful Spell!";
        //2.5. Rank, Type, Name, Description
        current_tree[# 16,2] = 0;
        current_tree[# 16,3] = 0;
        current_tree[# 16,4] = "Stat Up";
        current_tree[# 16,5] = "+x to Y Stat!";        
        //2.6. Rank, Type, Name, Description
        current_tree[# 17,2] = 0;
        current_tree[# 17,3] = 4;
        current_tree[# 17,4] = "Supp. Strike";
        current_tree[# 17,5] = "Helpful Attack!";
        //2.7. Rank, Type, Name, Description
        current_tree[# 18,2] = 0;
        current_tree[# 18,3] = 3;
        current_tree[# 18,4] = "Supp. Charge";
        current_tree[# 18,5] = "Helpful Spell!";        
        //2.8. Rank, Type, Name, Description
        current_tree[# 19,2] = 0;
        current_tree[# 19,3] = 0;
        current_tree[# 19,4] = "Stat Up";
        current_tree[# 19,5] = "+x to Y Stat!";        
        //2.9. Rank, Type, Name, Description
        current_tree[# 20,2] = 0;
        current_tree[# 20,3] = 4;
        current_tree[# 20,4] = "Supp. Strike";
        current_tree[# 20,5] = "Helpful Attack!";        
        //2.10. Rank, Type, Name, Description
        current_tree[# 21,2] = 0;
        current_tree[# 21,3] = 3;
        current_tree[# 21,4] = "Supp. Charge";
        current_tree[# 21,5] = "Helpful Spell!";        
        //2.11. Rank, Type, Name, Description
        current_tree[# 22,2] = 0;
        current_tree[# 22,3] = 0;
        current_tree[# 22,4] = "Stat Up";
        current_tree[# 22,5] = "+x to Y Stat!";        
        //2.12. Rank, Type, Name, Description
        current_tree[# 23,2] = 0;
        current_tree[# 23,3] = 4;
        current_tree[# 23,4] = "Final Strike";
        current_tree[# 23,5] = "Special Attack!";       
        
        //3.1. Rank, Type, Name, Description
        current_tree[# 24,2] = 0;
        current_tree[# 24,3] = 3;
        current_tree[# 24,4] = "Defen. Charge";
        current_tree[# 24,5] = "Protective Spell!";
        //3.2. Rank, Type, Name, Description
        current_tree[# 25,2] = 0;
        current_tree[# 25,3] = 0;
        current_tree[# 25,4] = "Stat up";
        current_tree[# 25,5] = "+x to Y Stat!";
        //3.3. Rank, Type, Name, Description
        current_tree[# 26,2] = 0;
        current_tree[# 26,3] = 4;
        current_tree[# 26,4] = "Defen. Strike";
        current_tree[# 26,5] = "Protective Attack!";
        //3.4. Rank, Type, Name, Description
        current_tree[# 27,2] = 0;
        current_tree[# 27,3] = 3;
        current_tree[# 27,4] = "Defen. Charge";
        current_tree[# 27,5] = "Protective Spell";
        //3.5. Rank, Type, Name, Description
        current_tree[# 28,2] = 0;
        current_tree[# 28,3] = 0;
        current_tree[# 28,4] = "Stat Up";
        current_tree[# 28,5] = "+x to Y Stat!";        
        //3.6. Rank, Type, Name, Description
        current_tree[# 29,2] = 0;
        current_tree[# 29,3] = 4;
        current_tree[# 29,4] = "Defen. Strike";
        current_tree[# 29,5] = "Protective Attack!";
        //3.7. Rank, Type, Name, Description
        current_tree[# 30,2] = 0;
        current_tree[# 30,3] = 3;
        current_tree[# 30,4] = "Defen. Charge";
        current_tree[# 30,5] = "Protective Spell!";        
        //3.8. Rank, Type, Name, Description
        current_tree[# 31,2] = 0;
        current_tree[# 31,3] = 0;
        current_tree[# 31,4] = "Stat Up";
        current_tree[# 31,5] = "+x to Y Stat!";        
        //3.9. Rank, Type, Name, Description
        current_tree[# 32,2] = 0;
        current_tree[# 32,3] = 4;
        current_tree[# 32,4] = "Defen. Strike";
        current_tree[# 32,5] = "Protective Attack!";        
        //3.10. Rank, Type, Name, Description
        current_tree[# 33,2] = 0;
        current_tree[# 33,3] = 3;
        current_tree[# 33,4] = "Defen. Charge";
        current_tree[# 33,5] = "Protective Spell!";        
        //3.11. Rank, Type, Name, Description
        current_tree[# 34,2] = 0;
        current_tree[# 34,3] = 0;
        current_tree[# 34,4] = "Stat Up";
        current_tree[# 34,5] = "+x to Y Stat!";        
        //3.12. Rank, Type, Name, Description
        current_tree[# 35,2] = 0;
        current_tree[# 35,3] = 4;
        current_tree[# 35,4] = "Final Strike";
        current_tree[# 35,5] = "Special Attack!"; 
    
    //////////if class is Knight
    }else if (f == 2){
    
        //1.1. Rank, Type, Name, Description
        current_tree[# 0,2] = 0;
        current_tree[# 0,3] = 6;
        current_tree[# 0,4] = "Offen. Shot";
        current_tree[# 0,5] = "Powerful Attack!";
        //1.2. Rank, Type, Name, Description
        current_tree[# 1,2] = 0;
        current_tree[# 1,3] = 0;
        current_tree[# 1,4] = "Stat Up";
        current_tree[# 1,5] = "+x to Y Stat!";
        //1.3. Rank, Type, Name, Description
        current_tree[# 2,2] = 0;
        current_tree[# 2,3] = 5;
        current_tree[# 2,4] = "Offen. Siege";
        current_tree[# 2,5] = "Powerful Stance!";
        //1.4. Rank, Type, Name, Description
        current_tree[# 3,2] = 0;
        current_tree[# 3,3] = 6;
        current_tree[# 3,4] = "Offen. Shot";
        current_tree[# 3,5] = "Powerful Attack!";
        //1.5. Rank, Type, Name, Description
        current_tree[# 4,2] = 0;
        current_tree[# 4,3] = 0;
        current_tree[# 4,4] = "Stat Up";
        current_tree[# 4,5] = "+x to Y Stat!";        
        //1.6. Rank, Type, Name, Description
        current_tree[# 5,2] = 0;
        current_tree[# 5,3] = 5;
        current_tree[# 5,4] = "Offen. Siege";
        current_tree[# 5,5] = "Powerful Stance!";
        //1.7. Rank, Type, Name, Description
        current_tree[# 6,2] = 0;
        current_tree[# 6,3] = 6;
        current_tree[# 6,4] = "Offen. Shot";
        current_tree[# 6,5] = "Powerful Attack!";        
        //1.8. Rank, Type, Name, Description
        current_tree[# 7,2] = 0;
        current_tree[# 7,3] = 0;
        current_tree[# 7,4] = "Stat Up";
        current_tree[# 7,5] = "+x to Y Stat!";        
        //1.9. Rank, Type, Name, Description
        current_tree[# 8,2] = 0;
        current_tree[# 8,3] = 5;
        current_tree[# 8,4] = "Offen. Siege";
        current_tree[# 8,5] = "Powerful Stance!";        
        //1.10. Rank, Type, Name, Description
        current_tree[# 9,2] = 0;
        current_tree[# 9,3] = 6;
        current_tree[# 9,4] = "Offen. Shot";
        current_tree[# 9,5] = "Powerful Attack!";        
        //1.11. Rank, Type, Name, Description
        current_tree[# 10,2] = 0;
        current_tree[# 10,3] = 0;
        current_tree[# 10,4] = "Stat Up";
        current_tree[# 10,5] = "+x to Y Stat!";        
        //1.12. Rank, Type, Name, Description
        current_tree[# 11,2] = 0;
        current_tree[# 11,3] = 5;
        current_tree[# 11,4] = "Final Siege";
        current_tree[# 11,5] = "Special Stance!";        
      
        //2.1. Rank, Type, Name, Description
        current_tree[# 12,2] = 0;
        current_tree[# 12,3] = 6;
        current_tree[# 12,4] = "Supp. Shot";
        current_tree[# 12,5] = "Helpful Attack!";
        //2.2. Rank, Type, Name, Description
        current_tree[# 13,2] = 0;
        current_tree[# 13,3] = 0;
        current_tree[# 13,4] = "Stat Up";
        current_tree[# 13,5] = "+x to Y Stat!";
        //2.3. Rank, Type, Name, Description
        current_tree[# 14,2] = 0;
        current_tree[# 14,3] = 5;
        current_tree[# 14,4] = "Supp. Siege";
        current_tree[# 14,5] = "Helpful Stance!";
        //2.4. Rank, Type, Name, Description
        current_tree[# 15,2] = 0;
        current_tree[# 15,3] = 6;
        current_tree[# 15,4] = "Supp. Shot";
        current_tree[# 15,5] = "Helpful Attack!";
        //2.5. Rank, Type, Name, Description
        current_tree[# 16,2] = 0;
        current_tree[# 16,3] = 0;
        current_tree[# 16,4] = "Stat Up";
        current_tree[# 16,5] = "+x to Y Stat!";        
        //2.6. Rank, Type, Name, Description
        current_tree[# 17,2] = 0;
        current_tree[# 17,3] = 5;
        current_tree[# 17,4] = "Supp. Siege";
        current_tree[# 17,5] = "Helpful Stance!";
        //2.7. Rank, Type, Name, Description
        current_tree[# 18,2] = 0;
        current_tree[# 18,3] = 6;
        current_tree[# 18,4] = "Supp. Shot";
        current_tree[# 18,5] = "Helpful Attack!";        
        //2.8. Rank, Type, Name, Description
        current_tree[# 19,2] = 0;
        current_tree[# 19,3] = 0;
        current_tree[# 19,4] = "Stat Up";
        current_tree[# 19,5] = "+x to Y Stat!";        
        //2.9. Rank, Type, Name, Description
        current_tree[# 20,2] = 0;
        current_tree[# 20,3] = 5;
        current_tree[# 20,4] = "Supp. Siege";
        current_tree[# 20,5] = "Helpful Stance!";        
        //2.10. Rank, Type, Name, Description
        current_tree[# 21,2] = 0;
        current_tree[# 21,3] = 6;
        current_tree[# 21,4] = "Supp. Shot";
        current_tree[# 21,5] = "Helpful Attack!";        
        //2.11. Rank, Type, Name, Description
        current_tree[# 22,2] = 0;
        current_tree[# 22,3] = 0;
        current_tree[# 22,4] = "Stat Up";
        current_tree[# 22,5] = "+x to Y Stat!";        
        //2.12. Rank, Type, Name, Description
        current_tree[# 23,2] = 0;
        current_tree[# 23,3] = 5;
        current_tree[# 23,4] = "Final Siege";
        current_tree[# 23,5] = "Special Stance!";       
        
        //3.1. Rank, Type, Name, Description
        current_tree[# 24,2] = 0;
        current_tree[# 24,3] = 6;
        current_tree[# 24,4] = "Defen. Shot";
        current_tree[# 24,5] = "Protective Attack!";
        //3.2. Rank, Type, Name, Description
        current_tree[# 25,2] = 0;
        current_tree[# 25,3] = 0;
        current_tree[# 25,4] = "Stat up";
        current_tree[# 25,5] = "+x to Y Stat!";
        //3.3. Rank, Type, Name, Description
        current_tree[# 26,2] = 0;
        current_tree[# 26,3] = 5;
        current_tree[# 26,4] = "Defen. Siege";
        current_tree[# 26,5] = "Protective Stance!";
        //3.4. Rank, Type, Name, Description
        current_tree[# 27,2] = 0;
        current_tree[# 27,3] = 6;
        current_tree[# 27,4] = "Defen. Shot";
        current_tree[# 27,5] = "Protective Attack";
        //3.5. Rank, Type, Name, Description
        current_tree[# 28,2] = 0;
        current_tree[# 28,3] = 0;
        current_tree[# 28,4] = "Stat Up";
        current_tree[# 28,5] = "+x to Y Stat!";        
        //3.6. Rank, Type, Name, Description
        current_tree[# 29,2] = 0;
        current_tree[# 29,3] = 5;
        current_tree[# 29,4] = "Defen. Siege";
        current_tree[# 29,5] = "Protective Stance!";
        //3.7. Rank, Type, Name, Description
        current_tree[# 30,2] = 0;
        current_tree[# 30,3] = 6;
        current_tree[# 30,4] = "Defen. Shot";
        current_tree[# 30,5] = "Protective Attack!";        
        //3.8. Rank, Type, Name, Description
        current_tree[# 31,2] = 0;
        current_tree[# 31,3] = 0;
        current_tree[# 31,4] = "Stat Up";
        current_tree[# 31,5] = "+x to Y Stat!";        
        //3.9. Rank, Type, Name, Description
        current_tree[# 32,2] = 0;
        current_tree[# 32,3] = 5;
        current_tree[# 32,4] = "Defen. Siege";
        current_tree[# 32,5] = "Protective Stance!";        
        //3.10. Rank, Type, Name, Description
        current_tree[# 33,2] = 0;
        current_tree[# 33,3] = 6;
        current_tree[# 33,4] = "Defen. Shot";
        current_tree[# 33,5] = "Protective Attack!";        
        //3.11. Rank, Type, Name, Description
        current_tree[# 34,2] = 0;
        current_tree[# 34,3] = 0;
        current_tree[# 34,4] = "Stat Up";
        current_tree[# 34,5] = "+x to Y Stat!";        
        //3.12. Rank, Type, Name, Description
        current_tree[# 35,2] = 0;
        current_tree[# 35,3] = 5;
        current_tree[# 35,4] = "Final Siege";
        current_tree[# 35,5] = "Special Stance!"; 
    
    //////////if class is Medic
    }else if (f == 3){
    
        //1.1. Rank, Type, Name, Description
        current_tree[# 0,2] = 0;
        current_tree[# 0,3] = 7;
        current_tree[# 0,4] = "Offen. Catalyze";
        current_tree[# 0,5] = "Powerful Potion!";
        //1.2. Rank, Type, Name, Description
        current_tree[# 1,2] = 0;
        current_tree[# 1,3] = 0;
        current_tree[# 1,4] = "Stat Up";
        current_tree[# 1,5] = "+x to Y Stat!";
        //1.3. Rank, Type, Name, Description
        current_tree[# 2,2] = 0;
        current_tree[# 2,3] = 8;
        current_tree[# 2,4] = "Offen. Concoct";
        current_tree[# 2,5] = "Powerful Poison!";
        //1.4. Rank, Type, Name, Description
        current_tree[# 3,2] = 0;
        current_tree[# 3,3] = 7;
        current_tree[# 3,4] = "Offen. Catalyze";
        current_tree[# 3,5] = "Powerful Potion!";
        //1.5. Rank, Type, Name, Description
        current_tree[# 4,2] = 0;
        current_tree[# 4,3] = 0;
        current_tree[# 4,4] = "Stat Up";
        current_tree[# 4,5] = "+x to Y Stat!";        
        //1.6. Rank, Type, Name, Description
        current_tree[# 5,2] = 0;
        current_tree[# 5,3] = 8;
        current_tree[# 5,4] = "Offen. Concoct";
        current_tree[# 5,5] = "Powerful Poison!";
        //1.7. Rank, Type, Name, Description
        current_tree[# 6,2] = 0;
        current_tree[# 6,3] = 7;
        current_tree[# 6,4] = "Offen. Catalyze";
        current_tree[# 6,5] = "Powerful Potion!";        
        //1.8. Rank, Type, Name, Description
        current_tree[# 7,2] = 0;
        current_tree[# 7,3] = 0;
        current_tree[# 7,4] = "Stat Up";
        current_tree[# 7,5] = "+x to Y Stat!";        
        //1.9. Rank, Type, Name, Description
        current_tree[# 8,2] = 0;
        current_tree[# 8,3] = 8;
        current_tree[# 8,4] = "Offen. Concoct";
        current_tree[# 8,5] = "Powerful Poison!";        
        //1.10. Rank, Type, Name, Description
        current_tree[# 9,2] = 0;
        current_tree[# 9,3] = 7;
        current_tree[# 9,4] = "Offen. Catalyze";
        current_tree[# 9,5] = "Powerful Potion!";        
        //1.11. Rank, Type, Name, Description
        current_tree[# 10,2] = 0;
        current_tree[# 10,3] = 0;
        current_tree[# 10,4] = "Stat Up";
        current_tree[# 10,5] = "+x to Y Stat!";        
        //1.12. Rank, Type, Name, Description
        current_tree[# 11,2] = 0;
        current_tree[# 11,3] = 8;
        current_tree[# 11,4] = "Final Concoct";
        current_tree[# 11,5] = "Special Poison!";        
      
        //2.1. Rank, Type, Name, Description
        current_tree[# 12,2] = 0;
        current_tree[# 12,3] = 7;
        current_tree[# 12,4] = "Supp. Catalyze";
        current_tree[# 12,5] = "Helpful Potion!";
        //2.2. Rank, Type, Name, Description
        current_tree[# 13,2] = 0;
        current_tree[# 13,3] = 0;
        current_tree[# 13,4] = "Stat Up";
        current_tree[# 13,5] = "+x to Y Stat!";
        //2.3. Rank, Type, Name, Description
        current_tree[# 14,2] = 0;
        current_tree[# 14,3] = 8;
        current_tree[# 14,4] = "Supp. Concoct";
        current_tree[# 14,5] = "Helpful Poison!";
        //2.4. Rank, Type, Name, Description
        current_tree[# 15,2] = 0;
        current_tree[# 15,3] = 7;
        current_tree[# 15,4] = "Supp. Catalyze";
        current_tree[# 15,5] = "Helpful Potion!";
        //2.5. Rank, Type, Name, Description
        current_tree[# 16,2] = 0;
        current_tree[# 16,3] = 0;
        current_tree[# 16,4] = "Stat Up";
        current_tree[# 16,5] = "+x to Y Stat!";        
        //2.6. Rank, Type, Name, Description
        current_tree[# 17,2] = 0;
        current_tree[# 17,3] = 8;
        current_tree[# 17,4] = "Supp. Concoct";
        current_tree[# 17,5] = "Helpful Poison!";
        //2.7. Rank, Type, Name, Description
        current_tree[# 18,2] = 0;
        current_tree[# 18,3] = 7;
        current_tree[# 18,4] = "Supp. Catalyze";
        current_tree[# 18,5] = "Helpful Potion!";        
        //2.8. Rank, Type, Name, Description
        current_tree[# 19,2] = 0;
        current_tree[# 19,3] = 0;
        current_tree[# 19,4] = "Stat Up";
        current_tree[# 19,5] = "+x to Y Stat!";        
        //2.9. Rank, Type, Name, Description
        current_tree[# 20,2] = 0;
        current_tree[# 20,3] = 8;
        current_tree[# 20,4] = "Supp. Concoct";
        current_tree[# 20,5] = "Helpful Poison!";        
        //2.10. Rank, Type, Name, Description
        current_tree[# 21,2] = 0;
        current_tree[# 21,3] = 7;
        current_tree[# 21,4] = "Supp. Catalyze";
        current_tree[# 21,5] = "Helpful Potion!";        
        //2.11. Rank, Type, Name, Description
        current_tree[# 22,2] = 0;
        current_tree[# 22,3] = 0;
        current_tree[# 22,4] = "Stat Up";
        current_tree[# 22,5] = "+x to Y Stat!";        
        //2.12. Rank, Type, Name, Description
        current_tree[# 23,2] = 0;
        current_tree[# 23,3] = 8;
        current_tree[# 23,4] = "Final Concoct";
        current_tree[# 23,5] = "Special Poison!";       
        
        //3.1. Rank, Type, Name, Description
        current_tree[# 24,2] = 0;
        current_tree[# 24,3] = 7;
        current_tree[# 24,4] = "Defen. Catalyze";
        current_tree[# 24,5] = "Protective Potion!";
        //3.2. Rank, Type, Name, Description
        current_tree[# 25,2] = 0;
        current_tree[# 25,3] = 0;
        current_tree[# 25,4] = "Stat up";
        current_tree[# 25,5] = "+x to Y Stat!";
        //3.3. Rank, Type, Name, Description
        current_tree[# 26,2] = 0;
        current_tree[# 26,3] = 8;
        current_tree[# 26,4] = "Defen. Concoct";
        current_tree[# 26,5] = "Protective Poison!";
        //3.4. Rank, Type, Name, Description
        current_tree[# 27,2] = 0;
        current_tree[# 27,3] = 7;
        current_tree[# 27,4] = "Defen. Catalyze";
        current_tree[# 27,5] = "Protective Potion";
        //3.5. Rank, Type, Name, Description
        current_tree[# 28,2] = 0;
        current_tree[# 28,3] = 0;
        current_tree[# 28,4] = "Stat Up";
        current_tree[# 28,5] = "+x to Y Stat!";        
        //3.6. Rank, Type, Name, Description
        current_tree[# 29,2] = 0;
        current_tree[# 29,3] = 8;
        current_tree[# 29,4] = "Defen. Concoct";
        current_tree[# 29,5] = "Protective Poison!";
        //3.7. Rank, Type, Name, Description
        current_tree[# 30,2] = 0;
        current_tree[# 30,3] = 7;
        current_tree[# 30,4] = "Defen. Catalyze";
        current_tree[# 30,5] = "Protective Potion!";        
        //3.8. Rank, Type, Name, Description
        current_tree[# 31,2] = 0;
        current_tree[# 31,3] = 0;
        current_tree[# 31,4] = "Stat Up";
        current_tree[# 31,5] = "+x to Y Stat!";        
        //3.9. Rank, Type, Name, Description
        current_tree[# 32,2] = 0;
        current_tree[# 32,3] = 8;
        current_tree[# 32,4] = "Defen. Concoct";
        current_tree[# 32,5] = "Protective Poison!";        
        //3.10. Rank, Type, Name, Description
        current_tree[# 33,2] = 0;
        current_tree[# 33,3] = 7;
        current_tree[# 33,4] = "Defen. Catalyze";
        current_tree[# 33,5] = "Protective Potion!";        
        //3.11. Rank, Type, Name, Description
        current_tree[# 34,2] = 0;
        current_tree[# 34,3] = 0;
        current_tree[# 34,4] = "Stat Up";
        current_tree[# 34,5] = "+x to Y Stat!";        
        //3.12. Rank, Type, Name, Description
        current_tree[# 35,2] = 0;
        current_tree[# 35,3] = 8;
        current_tree[# 35,4] = "Final Concoct";
        current_tree[# 35,5] = "Special Poison!"; 
        
    };    
    //CHECK FOR LOAD DATA
        //IF IT EXISTS
            //LOOP THROUGH AND CHECK WHICH SKILLS HAVE BEEN SELECTED.
        //Actually, it might work better if there is a "loaded game" flag that is flipped
        //When a file is checked for and loaded at the start up menu, while this load flag is flipped
        //This section then checks the loaded page inherently.
        
      

};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Active Flag Database

        //CHECK FOR LOAD DATA
        //IF IT EXISTS
            //LOOP THROUGH AND LOAD IT INTO DATABASE
        //Actually, it might work better if there is a "loaded game" flag that is flipped
        //When a file is checked for and loaded at the start up menu, while this load flag is flipped
        //This instantiation loop is skipped and the data from the load file is pulled instead.
        
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG CONTROL
//check current room
var roomname = room_get_name(room);
/**
//if room is debug room
if (roomname == "rm_debug"){

    if (keyboard_check_pressed(global.btn_Start)){
        room_goto("rm_test");
    };

    if (page == 0){
        if (keyboard_check_pressed(global.btn_Left)){
            actor--;
        };
        if (keyboard_check_pressed(global.btn_Right)){
            actor++;
        };
        if (actor &gt;3) actor = 0;
        if (actor &lt;0) actor = 3;
    };
        
        
    if (keyboard_check_pressed(global.btn_B)){
        page = 0;
    };
    
    
    
    if ((page ==1)||(page ==2)||(page ==3)||(page ==4)){
        if (character_page = 1){
            if (keyboard_check_pressed(global.btn_Left)){
                section--;
            };
            if (keyboard_check_pressed(global.btn_Right)){
                section++;
            };
            if (section &gt;3) section = 1;  
            if (section &lt;1) section = 3;  
        };
        
    };
    
    
    
    if (keyboard_check_pressed(global.btn_A)){
        if (page == 0){
        character_page = 0;
            if (actor == 0){
                page =1;
            }
            if (actor == 1){
                page =2;
            }
            if (actor == 2){
                page =3;
            }
            if (actor == 3){
                page =4;
            }
        }
        if (page &gt;0){
            section = 1;
            character_page++;
        }
    }
    
    if (character_page &gt;1) character_page =0;
}else{
    if (keyboard_check_pressed(global.btn_Start)){
        room_goto(rm_debug);
    };

};
**/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG MENU
//check current room
var roomname = room_get_name(room);

//if room is debug room
if (roomname == "rm_debug"){
    //Set font
    draw_set_font(global.myFont);
    //Displays all characters current stats
    if (page == 0){
        draw_text((view_wview/50),(view_hview/50), "Press Left or Right to Select an actor. Press A to visit their database.")
        //create_dialogue("Well this is an interesting place! Seems to me we're in a forest! We didn't have very many forests where I come from. I'm glad to see so many have grown back!", -1);

        for (var b=0;b&lt;14;b++){
            if (b ==0) draw_text((view_wview/15),(b+3)*(view_hview/30), "Name");
            if (b ==1) draw_text((view_wview/15),(b+3)*(view_hview/30), "Class");
            if (b ==2) draw_text((view_wview/15), (b+3)*(view_hview/30), "Level");
            if (b ==3) draw_text((view_wview/15), (b+3)*(view_hview/30), "EXP");
            if (b ==4) draw_text((view_wview/15), (b+3)*(view_hview/30), "Skill Pnts");
            if (b ==5) draw_text((view_wview/15), (b+3)*(view_hview/30), "Max Health");  
            if (b ==6) draw_text((view_wview/15), (b+3)*(view_hview/30), "Max Essence"); 
            if (b ==7) draw_text((view_wview/15), (b+3)*(view_hview/30), "Attack");   
            if (b ==8) draw_text((view_wview/15), (b+3)*(view_hview/30), "Defense");    
            if (b ==9) draw_text((view_wview/15), (b+3)*(view_hview/30), "Speed");
            if (b ==10) draw_text((view_wview/15), (b+3)*(view_hview/30), "Focus %");   
            if (b ==11) draw_text((view_wview/15), (b+3)*(view_hview/30), "Reaction %");
            if (b ==12) draw_text((view_wview/15), (b+3)*(view_hview/30), "Current HP"); 
            if (b ==13) draw_text((view_wview/15), (b+3)*(view_hview/30), "Current EsP");       
        };
        
        
         
        //Loop through each character's current attribute list in list
        for (var a=0;a&lt;4;a++){
            //Pull current grid from list to be operated on 
            var current_character = character_list[# a,0];
            //Loop through each attribute in list
            for (var b=0;b&lt;14;b++){
                draw_text((a+1)*(view_wview/5), (b+3)*(view_hview/30), string(current_character[| b]));
            };
        };
        
        if (actor == 0){
            draw_sprite(spr_bot_continue,0,(view_wview/5), (view_hview/20));
        }else if (actor == 1){
            draw_sprite(spr_bot_continue,0,2*(view_wview/5), (view_hview/20));
        }else if (actor == 2){
            draw_sprite(spr_bot_continue,0,3*(view_wview/5), (view_hview/20));
        }else if (actor == 3){
            draw_sprite(spr_bot_continue,0,4*(view_wview/5), (view_hview/20));
        };
        
        
        
        
        
    }else{
        draw_text((view_wview/50),(view_hview/50), "Press A to flip between Skill Tree and Growth Chart. B to go back. Left and Right to check Skill Branches")
        if (character_page ==0){
            //List labels
            draw_text((view_wview/2.5), (view_hview/20), "Lvl");
            draw_text(((view_wview/19))+(view_wview/2.5), (view_hview/20), "EXP");
            draw_text((2*(view_wview/19))+(view_wview/2.5), (view_hview/20), "SkP+");
            draw_text((3*(view_wview/19))+(view_wview/2.5), (view_hview/20), "HP+");
            draw_text((4*(view_wview/19))+(view_wview/2.5), (view_hview/20), "EsP+");
            draw_text((5*(view_wview/19))+(view_wview/2.5), (view_hview/20), "ATK+");
            draw_text((6*(view_wview/19))+(view_wview/2.5), (view_hview/20), "DEF+");
            draw_text((7*(view_wview/19))+(view_wview/2.5), (view_hview/20), "SPD+");
        
        }else{
        
            //Place current branch title 
            draw_text((section)*(view_wview/7),(view_hview/15), "Branch "+string(section))
        };
    
    
    
    };
    
    if (page == 1){
        

        draw_text((view_wview/20),(view_hview/20), "Tinkerer")
       
        
        if (character_page ==0){
            //Loop through a single character's Stat Growth grid in list
            

            
            //Pull current grid from list to be operated on 
            var current_growth = character_list[# 0,1];
            //Loop through each level in growth grid
            for (var b=1;b&lt;31;b++){
            draw_text(view_wview/2.5, (b*20)+(view_hview/15), string(b));
                //Loop through each attribute in the current level
                for (var c=0;c&lt;7;c++){
                    draw_text(((c+1)*(view_wview/19))+(view_wview/2.5), (b*20)+(view_hview/15), string(current_growth[# b,c]));
                };
            };
        };
        if (character_page ==1){
            //Loop through a single character's skill grid in list based on the current section
            //Pull current grid from list to be operated on 
            var current_tree = character_list[# 0,2];

            //Loop through all skills
            for (var b=0;b&lt;36;b++){
                //Loop through each attributes of each skill
                for (var c=0;c&lt;6;c++){
                    //If the first attribute (branch) equals the current section for viewing
                    if (current_tree[# b ,0] == section){
                        //And that branch is 1
                        if (section == 1){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 2
                        if (section == 2){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 3
                        if (section == 3){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                    };
                };
            };
        };
    };

    if (page == 2){
        
        draw_text((view_wview/20),(view_hview/20), "Lance Caster")
       
        
        if (character_page ==0){
            //Loop through a single character's Stat Growth grid in list
            
            
            //Pull current grid from list to be operated on 
            var current_growth = character_list[# 1,1];
            //Loop through each level in growth grid
            for (var b=1;b&lt;31;b++){
            draw_text(view_wview/2.5, (b*20)+(view_hview/15), string(b));
                //Loop through each attribute in the current level
                for (var c=0;c&lt;7;c++){
                    draw_text(((c+1)*(view_wview/19))+(view_wview/2.5), (b*20)+(view_hview/15), string(current_growth[# b,c]));
                };
            };
        };
        if (character_page ==1){
            //Loop through a single character's skill grid in list based on the current section
            //Pull current grid from list to be operated on 
            var current_tree = character_list[# 1,2];

            //Loop through all skills
            for (var b=0;b&lt;36;b++){
                //Loop through each attributes of each skill
                for (var c=0;c&lt;6;c++){
                    //If the first attribute (branch) equals the current section for viewing
                    if (current_tree[# b ,0] == section){
                        //And that branch is 1
                        if (section == 1){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 2
                        if (section == 2){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 3
                        if (section == 3){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                    };
                };
            };
        };
    };
    
    if (page == 3){
        
        draw_text((view_wview/20),(view_hview/20), "Knight of Arms")
       
        
        if (character_page ==0){
            //Loop through a single character's Stat Growth grid in list

            
            //Pull current grid from list to be operated on 
            var current_growth = character_list[# 2,1];
            //Loop through each level in growth grid
            for (var b=1;b&lt;31;b++){
            draw_text(view_wview/2.5, (b*20)+(view_hview/15), string(b));
                //Loop through each attribute in the current level
                for (var c=0;c&lt;7;c++){
                    draw_text(((c+1)*(view_wview/19))+(view_wview/2.5), (b*20)+(view_hview/15), string(current_growth[# b,c]));
                };
            };
        };
        if (character_page ==1){
            //Loop through a single character's skill grid in list based on the current section
            //Pull current grid from list to be operated on 
            var current_tree = character_list[# 2,2];

            //Loop through all skills
            for (var b=0;b&lt;36;b++){
                //Loop through each attributes of each skill
                for (var c=0;c&lt;6;c++){
                    //If the first attribute (branch) equals the current section for viewing
                    if (current_tree[# b ,0] == section){
                        //And that branch is 1
                        if (section == 1){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 2
                        if (section == 2){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 3
                        if (section == 3){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                    };
                };
            };
        };
    };
    
    if (page == 4){
        
        draw_text((view_wview/20),(view_hview/20), "Alchemist")
       
        
        if (character_page ==0){
            //Loop through a single character's Stat Growth grid in list
            
            
            //Pull current grid from list to be operated on 
            var current_growth = character_list[# 3,1];
            //Loop through each level in growth grid
            for (var b=1;b&lt;31;b++){
            draw_text(view_wview/2.5, (b*20)+(view_hview/15), string(b));
                //Loop through each attribute in the current level
                for (var c=0;c&lt;7;c++){
                    draw_text(((c+1)*(view_wview/19))+(view_wview/2.5), (b*20)+(view_hview/15), string(current_growth[# b,c]));
                };
            };
        };
        if (character_page ==1){
            //Loop through a single character's skill grid in list based on the current section
            //Pull current grid from list to be operated on 
            var current_tree = character_list[# 3,2];

            //Loop through all skills
            for (var b=0;b&lt;36;b++){
                //Loop through each attributes of each skill
                for (var c=0;c&lt;6;c++){
                    //If the first attribute (branch) equals the current section for viewing
                    if (current_tree[# b ,0] == section){
                        //And that branch is 1
                        if (section == 1){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/9), (b*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 2
                        if (section == 2){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-12)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                        //And that branch is 3
                        if (section == 3){
                            //For the first 5 attributes
                            if (c&lt;=4){ 
                                draw_text((c*28)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            }else{
                                draw_text((c*52)+(section)*(view_wview/7), ((b-24)*20)+(view_hview/10), string(current_tree[# b,c]));
                            };
                        };
                    };
                };
            };
        };
    };
    
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
