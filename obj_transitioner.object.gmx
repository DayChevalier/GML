<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Details

//This object was created courtesy of YellowAfterlife’s blog post on window slide transitions
//VERSION 1
//Older version tracked the start, end, and transitionary details for a potential X, Y, scale, and alpha, 
//    which can all be passed into the object and worked on at once. However, it’s possible that a given 
//    transition may only use one or two at a time. Does the additional attributes have more overhead?
//VERSION 2
//This version has disengendered the start, stop, percent, delta, and current details and instead creates 
//    a single set of operations for generic transionable variables. A single transition may simply call 
//    as many of this one object to work on the individual aspects of the transition, as need be.
//    One for X, one for Y, one for scale, and one for Alpha.

//LINKING TRANSITIONS
//Try following up an “overshoot” motion with a “bounce” motion. Note, in a bounce motion, end 
//    becomes the height, not the end goal.

//Explanation
//This object will never use the Start or End attributes alone to determine its location, scale, or 
//    transparency. It will instead find their difference, determine the current displayable 
//    transitionary step (percentages of the transition, held in Percent and added to each 
//    step by Delta), and then added back to start to determine the current placement of the 
//    object, until Percentage = 1, meaning the difference is now whole, and adding it to Start 
//    will equal End.

//Since one object can actually contain multiple sprites in its draw event, this event will not 
//    output numbers (assign them directly to the object). Instead, it will gather the relevant 
//    changes over time and store them in the Current variable each step. It will be up to the 
//    mother object to grab the Current variable each step and determine where it should be 
//    applied.

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setters


//Holds the passed transition's pre and post positions, growing percent of change, speed of change, motion of 
//    change, and a current position to be passed back into the object each step.
start_x = 0;
end_x = 0;
percent_x = 0;
delta_x = 0;
motion_x = 0;
current_x = 0;

//Motion type is used to transition the object, this will determine the algorithm used
//0 = Linear
//1 = Parabolic
//2 = Bounce in Place
//3 = Over Shot





/*
//Holds its X pre and post positions, growing percent of change, speed of change, motion of 
//    change, and a current position to be passed back into the object each step.
start_x = 0;
end_x = 0;
percent_x = 0;
delta_x = 0;
motion_x = 0;
current_x = 0;

//Holds its Y pre and post positions, growing percent of change, speed of change, motion of 
//    change, and a current position to be passed back into the object each step.
start_y = 0;
end_y = 0;
percent_y = 0;
delta_y = 0;
motion_y = 0;
current_y = 0;

//Holds its Scale’s pre and post transition, growing percent of change, speed of change, motion 
//    of change, and a current state of transition to be passed back into the object each step.
start_scale = 1;
end_scale = 1;
percent_scale =0;
delta_scale = 0;
motion_scale = 0;
current_scale = 0;

//Holds its Transparency’s pre and post transition, growing percent of change, speed of change, 
//    motion of change, and a current state of transition to be passed back into the object 
//    each step.
start_alpha = 1;
end_alpha = 1;
percent_alpha = 0;
delta_alpha = 0;
motion_alpha = 0;
current_alpha = 0;

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transitionary functions

//Check if there is any x transition to be made
if (end_x != start_x){
    //X delta transition
    //If delta is greater than 0 (a transition is wanted)
    if (delta_x &gt; 0) { 
        //And current is still less than 1 (not completely transitioned yet)
        if (percent_x &lt; 1){
            //Add delta to current until it reaches 1
            percent_x = min(percent_x + delta_x, 1);
        };
        //Passing current x back to object
        //0 = Linear
        if (motion_x == 0){
            current_x = start_x + (end_x - start_x) * percent_x;
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //1 = Parabolic (Quick Start, Easy End)
        if (motion_x == 1){
            current_x = start_x + (end_x - start_x) * sin(percent_x * pi / 2);
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //2 = Bounce in place (End becomes the height of the bounce)
        if (motion_x == 2){
            current_x = start_x + (end_x - start_x) * sin(percent_x * pi);
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //3 = Overshoot and bounce back
        if (motion_x == 3){
            current_x = start_x + (end_x - start_x) * (1.1545*sin(percent_x * (pi/1.5)));
            if (percent_x ==1){
                instance_destroy();
            };
        };
    };
};


/*
//Check if there is any x transition to be made
if (end_x != start_x){
    //X delta transition
    //If delta is greater than 0 (a transition is wanted)
    if (delta_x &gt; 0) { 
        //And current is still less than 1 (not completely transitioned yet)
        if (percent_x &lt; 1){
            //Add delta to current until it reaches 1
            percent_x = min(percent_x + delta_x, 1);
        };
        //Passing current x back to object
        //0 = Linear
        if (motion_x == 0){
            current_x = start_x + (end_x - start_x) * percent_x;
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //1 = Parabolic (Quick Start, Easy End)
        if (motion_x == 1){
            current_x = start_x + (end_x - start_x) * sin(percent_x * pi / 2);
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //2 = Bounce in place (End becomes the height of the bounce)
        if (motion_x == 2){
            current_x = start_x + (end_x - start_x) * sin(percent_x * pi);
            if (percent_x ==1){
                instance_destroy();
            };
        };
        //3 = Overshoot and bounce back
        if (motion_x == 3){
            current_x = start_x + (end_x - start_x) * (1.1545*sin(percent_x * (pi/1.5)));
            if (percent_x ==1){
                instance_destroy();
            };
        };
    };
};
    
//Check if there is any y transition to be made
if (end_y != start_y){
    //y delta transition
    //If delta is greater than 0 (a transition is wanted)
    if (delta_y &gt; 0) { 
        //And current is still less than 1 (not completely transitioned yet)
        if (percent_y &lt; 1){
            //Add delta to current until it reaches 1
        percent_y = min(percent_y + delta_y, 1);
        };
        //Passing current y back to object
        //0 = Linear
        if (motion_y == 0){
            current_y = start_y + (end_y - start_y) * percent_y;
            if (percent_y ==1){
                instance_destroy();
            };
        };
        //1 = Parabolic (Quick Start, Easy End)
            if (motion_y == 1){
            current_y = start_y + (end_y - start_y) * sin(percent_y * pi / 2);
            if (percent_y ==1){
                instance_destroy();
            };
        };
        //2 = Bounce in place (End becomes the height of the bounce)
        if (motion_y == 2){
            current_y = start_y + (end_y - start_y) * sin(percent_y * pi);
            if (percent_y ==1){
                instance_destroy();
            };
        };
        //3 = Overshoot and bounce back
        if (motion_y == 3){
            current_y = start_y + (end_y - start_y) * (1.1545*sin(percent_y * (pi/1.5)));
            if (percent_y ==1){
                instance_destroy();
            };
        };
    };
};
    
//Check if there is any scale transition to be made
if (end_scale != start_scale){
    //scale delta transition
    //If delta is greater than 0 (a transition is wanted)
    if (delta_scale &gt; 0) { 
        //And current is still less than 1 (not completely transitioned yet)
        if (percent_scale &lt; 1){
            //Add delta to current until it reaches 1
            percent_scale = min(percent_scale + delta_scale, 1);
        };
        //Passing current scale back to object
        //0 = Linear
        if (motion_scale == 0){
            current_scale = start_scale + (end_scale - start_scale) * percent_scale;
            if (percent_scale ==1){
                instance_destroy();
            };
        };
        //1 = Parabolic (Quick Start, Easy End)
        if (motion_scale == 1){
            current_scale = start_scale + (end_scale - start_scale) * sin(percent_scale * pi / 2);
            if (percent_scale ==1){
                instance_destroy();
            };
        };
        //2 = Bounce in place (End becomes the height of the bounce)
        if (motion_scale == 2){
            current_scale = start_scale + (end_scale - start_scale) * sin(percent_scale * pi);
            if (percent_scale ==1){
                instance_destroy();
            };
        };
        //3 = Overshoot and bounce back
        if (motion_scale == 3){
            current_scale = start_scale + (end_scale - start_scale) * (1.1545*sin(percent_scale * (pi/1.5)));
            if (percent_scale ==1){
                instance_destroy();
            };
        };
    };
};
    
//Check if there is any alpha transition to be made
if (end_alpha != start_alpha){
    //alpha delta transition
    //If delta is greater than 0 (a transition is wanted)
    if (delta_alpha &gt; 0) { 
        //And current is still less than 1 (not completely transitioned yet)
        if (percent_alpha &lt; 1){
            //Add delta to current until it reaches 1
            percent_alpha = min(percent_alpha + delta_alpha, 1);
        };
        //Passing current alpha back to object
        //0 = Linear
        if (motion_alpha == 0){
            current_alpha = start_alpha + (end_alpha - start_alpha) * percent_alpha;
            if (percent_alpha ==1){
                instance_destroy();
            };
        };
        //1 = Parabolic (Quick Start, Easy End)
        if (motion_alpha == 1){
            current_alpha = start_alpha + (end_alpha - start_alpha) * sin(percent_alpha * pi / 2);
            if (percent_alpha ==1){
                instance_destroy();
            };
        };
        //2 = Bounce in place (End becomes the height of the bounce)
        if (motion_alpha == 2){
            current_alpha = start_alpha + (end_alpha - start_alpha) * sin(percent_alpha * pi);
            if (percent_alpha ==1){
                instance_destroy();
            };
        };
        //3 = Overshoot and bounce back
        if (motion_alpha == 3){
            current_alpha = start_alpha + (end_alpha - start_alpha) * (1.1545*sin(percent_alpha * (pi/1.5)));
            if (percent_alpha ==1){
                instance_destroy();
            };
        };
    };
};
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
