<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//For Wheel
//Set's Wheel location
//wheel_x=display_get_gui_height()/24;
//wheel_y=display_get_gui_height()-(display_get_gui_height()/22);
wheel_x=4;
wheel_y=display_get_gui_height()-4;
//Enlarges wheel to better fit screen
//wheel_xscale = 0.65;
//wheel_yscale = 0.65;
wheel_xscale = 1;
wheel_yscale = 1;

centerx = (sprite_get_width(spr_wheel)/2)
centery = (sprite_get_height(spr_wheel)/2)

//Average placement of Icon on the character wheel relative to its center point
icon_dist = (sprite_get_height(spr_menu_quickwheel)/2) - 26;

//Current angle the main icon is placed on the character wheel, changed by loop to show rotation
//Placement of selected Icon along the center point
//All other icons are relative to this. (Just over 45 degrees)
icon_angle = 47;
//Holds the angle to turn too next
next_slot = 0;
//For checking if wheel is active
//0 = Not Active
//1 = Active
//2 = Deactiving
active = 0;
//For changing the icon's size as they move
scale = 3;
//For setting the current icon
current =global.currentActor;
//Determines if the icons are moving, and in what direction.
changing = 0;
//Rate of icon transition, less smooth the faster it is
spin_rate = 5;

//Determines spin on wheel
rot = 0;

//Determines character shift animation
expand = 0;

//For character icon indicator's animation
indicator_count =0;
indicatorAlength = sprite_get_number(spr_menu_quickwheel_indicatorA);
indicatorBlength = indicatorAlength+sprite_get_number(spr_menu_quickwheel_indicatorB)+1;

character_total = 0;
//Loop through each character's acitve flag
event_user(0);

//Flag for deactivation animation
deactive = 0;
//Degrees around center point for spacing icons
separation = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character animation control
//Increase expand for character display animation
if (expand &gt;= sprite_get_height(spr_readout)/2){
    changing = 0;
}else{
    expand +=3;//2
    alarm[2] = 0.01 *room_speed
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn active off

//Turn off draw function
active = 2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outer Ring Change control
if (icon_angle != next_slot){
    //Increase or decrease (based on changing direction) Icon_angle a small increment
    //Playing with this increment should affect smoothness of rotation 
    icon_angle += -(spin_rate)*changing;
    //Rotate background of wheel
    rot += -(10)*changing;
    expand-=3;

} else{
    //Change the current selection based on the changing direction
    current += changing;
    //If the chosen actor is out of bounds, wrap around
    if (current &gt; character_count-1){
        current =0;
    };
    if (current &lt; 0){
        current =character_count-1;
    };
    //Then mark them as no longer changing
    //changing = 0;
    expand = 0;
    //Start character display animation
    alarm[2] = 0.01 * room_speed;
    
};


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for activation and input

//if menu activation key is pressed 
if (keyboard_check(global.btn_R)||(changing != 0)){   
    //Check if the wheel is mid-deactivation first
    if (active != 1){
        alarm[2] = 0.01 *room_speed
    };
    //Set the wheel to active to activate draw functions
    active = 1; 
    
    //Stop player
    with(obj_player){
        noinput_state = 1;
    };
    
    //Search for Remmy and remove him while the wheel is active
    if (instance_exists(obj_helper)){    
        instance_destroy(obj_helper);
    };  
    

    //Animate character icon indicator into existance
    if (indicator_count &lt;indicatorBlength){
        //indicator_count++;
        indicator_count +=1.5;
    };
    
    //If wheel isn't moving yet
    if (changing == 0 &amp;&amp; expand == sprite_get_height(spr_readout)/2){
        //And if more than one character exists
        if (character_count &gt; 1){
            //Allow arrow input to change character icon
            if (keyboard_check(global.btn_Up) ||keyboard_check(global.btn_Left)){
                //If up or left is pushed, flag the wheel as changing in the negative
                changing = -1;
                next_slot = icon_angle - (separation*changing);
            };
            if (keyboard_check(global.btn_Down) ||keyboard_check(global.btn_Right)){
                //If down or right is pushed, flag the wheel as changing in the positive
                changing = 1;
                next_slot = icon_angle - (separation*changing);
            };
        };
    };
    //Closing alarm is reactivated every step before it can close.
    //When input ceases can it continue
    //(R is let go and it's not changing, so this block is not active)
    alarm[1] = 5;
};

//If the wheel is now changing in either direction
if (changing != 0 &amp;&amp; alarm[2] == -1){
    //Active alarm to incrementally change wheel and icon position
    if (alarm[0] == -1){
        alarm[0]= 0.01 * room_speed;
    };   
};

//If Activate flag has been set to deactive
if (active == 2){
    //De-animate character icon indicator
    if (indicator_count &gt; 0){
        indicator_count -=1.5;
        expand-=3;//2
    };
    
    //Once indicator de-animated, turn active flag off
    if (indicator_count &lt;= 0){
        //Turn off draw function
        active = 0;
        
        //Reset actor presentation animation
        expand = 0;
        
        //And return movement to the player
        with(obj_player){
            noinput_state = 0;
        };
        //Finally, change the player to the chosen actor
        global.currentActor = current;
    };

};



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for new character
//This event should be called at event creation
//This event should be called by an outside event everytime a new character is added or removed.
character_count = 0;
for (var i = 0; i &lt; 4; i++){
    character_count +=obj_actor_control.character_list[# i,3]
};

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actor Menu
//Draw wheel in bottom corner
//draw_sprite_ext(spr_wheel,0, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,c_white,1);
//draw_sprite_ext(spr_menu,0, wheel_x+16, wheel_y-16,wheel_xscale,wheel_yscale,0,c_white,1);
if (active == 0){
    draw_sprite_ext(spr_menu_hub,1, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor,1);
    draw_sprite_ext(spr_menu_hub,2, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor2,1);
};
//draw_sprite_ext(spr_outerwheel,-1, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor,1);
//draw_sprite_ext(spr_outerwheel_glow,-1, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor,1);



if (active &gt; 0){
    //Draw larger menu
    if (character_count &gt;1){
        draw_sprite_ext(spr_menu_quickwheel,1, wheel_x, wheel_y,clamp(indicator_count/14,0,wheel_xscale),clamp(indicator_count/14,0,wheel_yscale),rot,global.frameColor,(indicator_count/indicatorBlength)/1.33);
        draw_sprite_ext(spr_menu_quickwheel,2, wheel_x, wheel_y,clamp(indicator_count/14,0,wheel_xscale),clamp(indicator_count/14,0,wheel_yscale),0,global.frameColor2,indicator_count/indicatorBlength);
        
    }else{
        draw_sprite_ext(spr_menu_quickwheel_piece,0, wheel_x, wheel_y,clamp(indicator_count/14,0,wheel_xscale),clamp(indicator_count/14,0,wheel_yscale),rot,global.frameColor,indicator_count/indicatorBlength);
        draw_sprite_ext(spr_menu_quickwheel_piece,1, wheel_x, wheel_y,clamp(indicator_count/14,0,wheel_xscale),clamp(indicator_count/14,0,wheel_yscale),rot,global.frameColor2,indicator_count/indicatorBlength);
    
    };
        
    if (indicator_count &gt;= indicatorBlength){
        //Draw them based on who is present
        posx0 = wheel_x+lengthdir_x(icon_dist,icon_angle);
        posy0 = wheel_y+lengthdir_y(icon_dist,icon_angle);
        posx1 = wheel_x+lengthdir_x(icon_dist,icon_angle+separation);
        posy1 = wheel_y+lengthdir_y(icon_dist,icon_angle+separation);
        posx2 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*2));
        posy2 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*2));
        posx3 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*3));
        posy3 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*3));
        posx4 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*4));
        posy4 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*4));
        posx5 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*5));
        posy5 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*5));
        posx6 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*6));
        posy6 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*6));
        posx7 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*7));
        posy7 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*7));
        posx8 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*8));
        posy8 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*8));
        posx9 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*9));
        posy9 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*9));
        posx10 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*10));
        posy10 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*10));
        posx11 = wheel_x+lengthdir_x(icon_dist,icon_angle+(separation*11));
        posy11 = wheel_y+lengthdir_y(icon_dist,icon_angle+(separation*11));

        if (character_count ==4){
            draw_sprite_ext(spr_icon_act0,0,posx0,posy0,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx1,posy1,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx2,posy2,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act3,0,posx3,posy3,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx4,posy4,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx5,posy5,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx6,posy6,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act3,0,posx7,posy7,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx8,posy8,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx9,posy9,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx10,posy10,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act3,0,posx11,posy11,scale,scale,0,c_white,1);
        };
        if (character_count ==3){
            draw_sprite_ext(spr_icon_act0,0,posx0,posy0,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx1,posy1,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx2,posy2,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx3,posy3,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx4,posy4,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx5,posy5,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx6,posy6,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx7,posy7,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx8,posy8,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx9,posy9,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx10,posy10,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act2,0,posx11,posy11,scale,scale,0,c_white,1);
        };
        if (character_count ==2){
            draw_sprite_ext(spr_icon_act0,0,posx0,posy0,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx1,posy1,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx2,posy2,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx3,posy3,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx4,posy4,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx5,posy5,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx6,posy6,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx7,posy7,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx8,posy8,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx9,posy9,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act0,0,posx10,posy10,scale,scale,0,c_white,1);
            draw_sprite_ext(spr_icon_act1,0,posx11,posy11,scale,scale,0,c_white,1);
        };
        if (character_count ==1){
            draw_sprite_ext(spr_icon_act0,0,posx0,posy0,scale,scale,0,c_white,1);
        };
    };
       
    //Create lower indicator, hub filling and hub boarder, then upper indicator
    draw_sprite_ext(spr_menu_quickwheel_indicatorA,clamp(indicator_count,0,indicatorAlength-1), wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor,indicator_count/indicatorBlength);
    draw_sprite_ext(spr_menu_hub,1, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor,1);
    draw_sprite_ext(spr_menu_hub,2, wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor2,1);
    draw_sprite_ext(spr_menu_quickwheel_indicatorB,clamp(indicator_count-(indicatorAlength+1),0,8), wheel_x, wheel_y,wheel_xscale,wheel_yscale,0,global.frameColor2,indicator_count/indicatorBlength);
    
    /////DRAW MINI ANIMATION HERE
    
    draw_sprite_part_ext(asset_get_index("spr_swing_left_act" +string(current)), image_index/1.5, 0, (sprite_get_height(asset_get_index("spr_swing_left_act" +string(current)))/2)-expand, 
        sprite_get_width(asset_get_index("spr_swing_left_act" +string(current))), expand*2, wheel_x+14, wheel_y-62-(expand*2),2,2,c_white,1);
    
    draw_sprite_part_ext(spr_sword_swing_left, image_index/1.5, 0, (sprite_get_height(spr_sword_swing_left)/2)-expand, 
        sprite_get_width(spr_sword_swing_left), expand*2, wheel_x+14, wheel_y-62-(expand*2),2,2,c_white,1);
    
    draw_sprite_part_ext(spr_readout, image_index/4, 0, (sprite_get_height(spr_readout)/2)-expand, 
        sprite_get_width(spr_readout), expand*2, wheel_x-2, wheel_y-46-(expand*2),2,2,c_white,1);

            
    if (object_exists(obj_actor_control)){
        // Font of text
        draw_set_font(global.myFont);
        var current_character_obj = obj_actor_control.character_list[# current,0];
        var current_character_name = string(current_character_obj[| 0]);
        draw_text_transformed(68 - (string_width(current_character_name)/2), (display_get_gui_height()+8)-(expand*1.5), current_character_name, 1.75, 1.75, 0);
    };

} else{
    //Redraw sprites
    if (!instance_exists(obj_helper)){    
        instance_create((wheel_x-4)+(sprite_get_width(spr_wheel)/3.5), (wheel_y-4)-(sprite_get_width(spr_wheel)/3.5),obj_helper);
    };
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Demo Instructions
/**
//Set the debug font
draw_set_font(global.myFont);

//Draw the resting text 
var i = 0;
draw_text(10, 10+(i*20), "CONTROLS"); i++;
draw_text(10, 10+(i*20), "Move: WASD"); i++;
//draw_text(10, 10+(i*20), "Text Event: Space"); i++;
draw_text(10, 10+(i*20), "Interact: K"); i++;
draw_text(10, 10+(i*20), "Sword: L"); i++;
draw_text(10, 10+(i*20), "Freeze Camera: F"); i++;
draw_text(10, 10+(i*20), "Character Menu: O"); i++;

**/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
