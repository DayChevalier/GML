<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Current direction sword was spawned in
current_direction = 0;
//If Link is now out of swing
post_swing = 0;
//If sword is being held as determined by link
held_state = 0;
//Counter for charge added by link's hold
hold_counter = 0;
//Max the counter must surpass.
charge_time = 60;
image_xscale = 2;
image_yscale = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if post_swing == 0{
    //If current direction has been set to UP
    if (current_direction ==0){
        //change sprite to up facing swing
        sprite_index = spr_sword_swing_up;
    //If current direction has been set to RIGHT
    } else if (current_direction ==1){
        //change sprite to right facing swing
        sprite_index = spr_sword_swing_right;
    //If current direction has been set to DOWN
    } else if (current_direction ==2){
        //change sprite to down facing swing
        sprite_index = spr_sword_swing_down;
    //If current direction has been set to LEFT
    } else if (current_direction ==3){
        //change sprite to left facing swing
        sprite_index = spr_sword_swing_left;
    };
//};

/**
//If Sword animation completes
if post_swing ==1{
    //If Held or Charge state is active
    if ((held_state ==1)||(global.charge_state == 1)){
        //If Y AXIS directions are being used....
        if ((global.press_btn_Down == 1)||(global.press_btn_Up == 1)){    
    
            //If DOWN is being pushed
            if (global.press_btn_Down == 1){
                //Remove any reverse momentum
                if (vspeed &lt; 0) vspeed = 0;
                //And begin adding current direction momentum
                vspeed += 0.75;
            };
        
            //If UP is being pushed
            if (global.press_btn_Up == 1){
                //Remove any reverse momentum
                if (vspeed &gt; 0) vspeed =0;
                //And begin adding current direction momentum
                vspeed -= 0.75;
            }; 
     
            //If UP AND DOWN is being pushed, give domimance to UP
            if ((global.press_btn_Down == 1) &amp;&amp; (global.press_btn_Up == 1)){
                //Remove any reverse momentum
                if (vspeed &gt; 0) vspeed =0;
                //And begin adding current direction momentum
                vspeed -= 0.75;
            }     
        }else{
            //If no UP or DOWN is being pushed, all Y axis momentum is removed.
            vspeed = 0;
        };
    
        //If X AXIS directions are being used....
        if ((global.press_btn_Right == 1) || (global.press_btn_Left == 1)){

            //If RIGHT is being pushed
            if (global.press_btn_Right == 1){
            //Remove any reverse momentum
            if (hspeed &lt; 0) hspeed =0;
                //And begin adding current direction momentum
                hspeed += .75;
            };
        
            //If LEFT is being pushed
            if (global.press_btn_Left == 1){
                //Remove any reverse momentum
                if (hspeed &gt; 0) hspeed =0;
                //And begin adding current direction momentum
                hspeed -= .75;
            };
       
            //If LEFT AND RIGHT is being pushed, give domimance to LEFT
            if ((global.press_btn_Left == 1) &amp;&amp; (global.press_btn_Right == 1)){
                //Remove any reverse momentum
                if (hspeed &gt; 0) hspeed =0;
                //And begin adding current direction momentum
                hspeed -= .75;  
            };
        }else{
            //If no LEFT or RIGHT is being pushed, all X axis momentum is removed.
            hspeed = 0;
        };
    };

    //If sword is being held as link, sword enters held state once swing animation is finished
    //direction is based on link's direction
    if (held_state == 1){
        //Count the time in the held state
        hold_counter++;
        //If current direction has been set to UP
        if (current_direction ==0){
            depth = 1;
            //change sprite to up facing hold 
            sprite_index = spr_sword_held_up;
    
        //If current direction has been set to RIGHT
        } else if (current_direction ==1){
            depth = -1;
            //change sprite to right facing hold
            sprite_index = spr_sword_held_right;
            
        //If current direction has been set to DOWN
        } else if (current_direction ==2){
            depth = -1;
            //change sprite to down facing hold
            sprite_index = spr_sword_held_down;
    
        //If current direction has been set to LEFT
        } else if (current_direction ==3){
            depth = -1;
            //change sprite to left facing hold
            sprite_index = spr_sword_held_left;
        };   
        //If sword is held long enough, exist held state and enter charge state
        if (hold_counter &gt;= charge_time){
            held_state =0;
            global.charge_state = 1;
            hold_counter =0;
        };
    };
    
    //if sword enters charge state, change animation to charge animation based on direction
    if (global.charge_state == 1){
        //If current direction has been set to UP
        if (current_direction ==0){            
            //change sprite to up facing charge
            sprite_index = spr_sword_charge_up;
    
        //If current direction has been set to RIGHT
        } else if (current_direction ==1){  
            //change sprite to right facing charge
            sprite_index = spr_sword_charge_right;
            
        //If current direction has been set to DOWN
        } else if (current_direction ==2){
            //change sprite to down facing charge
            sprite_index = spr_sword_charge_down;
    
        //If current direction has been set to LEFT
        } else if (current_direction ==3){
            //change sprite to left facing charge
            sprite_index = spr_sword_charge_left;
        };
    };
};
    
    //If button is released.......
    if (((global.release_btn_A == 1)&amp;&amp;(global.A_slot == 1))||((global.release_btn_B == 1)&amp;&amp;(global.B_slot == 1))){

        //If sword is in held state, simple release the held state.
        if held_state == 1{
            held_state = 0;
        };
        
        //If the sword is in charge state, change the sword to release state and activate link's release animation based on direction
        if global.charge_state == 1{
            //remove all momentum
            hspeed=0;
            vspeed=0;
            //reset animation to base
            image_index = 0;
            //if current direction is down...          
            if current_direction == 0{
                sprite_index = spr_sword_spin_up;
            };
            //if current direction is up...
            if current_direction == 1{
                sprite_index = spr_sword_spin_right;
            };
            //if current direction is right...
            if current_direction == 2{
                sprite_index = spr_sword_spin_down;
            };
            //if current direction is left...
            if current_direction == 3{
                sprite_index = spr_sword_spin_left;
            };
        };
        global.charge_state = 0;
        hold_counter = 0;
    };
**/
if image_index &gt;= image_number-1{
    post_swing = 1;
    //if not, destroy instance at animation end.
    if ((held_state == 0) &amp;&amp; (global.charge_state == 0)){
        instance_destroy();
    };
};


//Speed cannot accelerate beyond this point
if (speed &gt; 2.5) speed = 2.5;

//cannot leave this area
x=min(x,room_width-16);
x=max(x,16);
y=min(y,room_height-16);
y=max(y,16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
